; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=unroll-and-interleave %s -S --luai-factor=2 | FileCheck %s

; This test containst something like this:
;
; for (...) {
;   while (...) {
;     ...
;   }
; }
;
; which has a DR1 that has an entry in another DR2 but the entry of DR1 (bb37)
; is NOT dominated by the entry of DR2 (bb85), so we must generate both DRs in
; no dynamic convergence mode.

target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

%"class.openmc::Particle" = type { %"class.openmc::NuclideMicroXSCache", [9 x %"struct.openmc::ElementMicroXS"], %"struct.openmc::MacroXS", i64, i32, i32, i32, [4 x i8], [6 x %"class.openmc::LocalCoord"], i32, [6 x i32], double, double, i32, i32, double, double, %"struct.openmc::Position", %"struct.openmc::Position", %"struct.openmc::Position", double, i8, i32, i32, i32, i32, i32, i32, double, [8 x i32], i32, i32, i32, i32, %"struct.openmc::BoundaryInfo", double, double, i32, i8, [8 x i64], i32, [5 x %"struct.openmc::Particle::Bank"], i64, i64, [1 x double], ptr, %"class.std::vector", [16 x %"struct.openmc::Particle::NuBank"], double, double, double, double, i8, double, double, i32, i64 }
%"class.openmc::NuclideMicroXSCache" = type { [1 x %"struct.openmc::NuclideMicroXS"] }
%"struct.openmc::NuclideMicroXS" = type { double, double, double, double, double, double, double, double, [6 x double], i32, i32, double, i32, i32, double, i8, double, double }
%"struct.openmc::ElementMicroXS" = type { i32, double, double, double, double, double, double, double }
%"struct.openmc::MacroXS" = type { double, double, double, double, double, [6 x double], double, double, double, double }
%"class.openmc::LocalCoord" = type <{ %"struct.openmc::Position", %"struct.openmc::Position", i32, i32, i32, i32, i32, i32, i8, [7 x i8] }>
%"struct.openmc::Position" = type { double, double, double }
%"struct.openmc::BoundaryInfo" = type <{ double, i32, i32, %"struct.std::array.0.1", [4 x i8] }>
%"struct.std::array.0.1" = type { [3 x i32] }
%"struct.openmc::Particle::Bank" = type { %"struct.openmc::Position", %"struct.openmc::Position", double, double, i32, i32, i32, i64, i64 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<std::vector<openmc::Position>, std::allocator<std::vector<openmc::Position>>>::_Vector_impl" }
%"struct.std::_Vector_base<std::vector<openmc::Position>, std::allocator<std::vector<openmc::Position>>>::_Vector_impl" = type { %"struct.std::_Vector_base<std::vector<openmc::Position>, std::allocator<std::vector<openmc::Position>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<std::vector<openmc::Position>, std::allocator<std::vector<openmc::Position>>>::_Vector_impl_data" = type { ptr, ptr, ptr }
%"struct.openmc::Particle::NuBank" = type { double, double, i32 }

@_ZN6openmc10simulation16device_particlesE = external protected local_unnamed_addr addrspace(1) global ptr, align 8

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

; Function Attrs: convergent nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: alwaysinline norecurse nounwind
define weak_odr protected amdgpu_kernel void @__omp_offloading_4c_8d8aeb__ZN6openmc19process_init_eventsEi_l206(ptr noalias noundef %arg, i64 noundef %arg1) local_unnamed_addr #2 {
; CHECK-LABEL: define weak_odr protected amdgpu_kernel void @__omp_offloading_4c_8d8aeb__ZN6openmc19process_init_eventsEi_l206(
; CHECK-SAME: ptr noalias noundef [[ARG:%.*]], i64 noundef [[ARG1:%.*]]) local_unnamed_addr #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[I:%.*]] = tail call i32 @llvm.amdgcn.workitem.id.x() #[[ATTR3:[0-9]+]], !range [[RNG157:![0-9]+]], !noundef [[META158:![0-9]+]]
; CHECK-NEXT:    [[I2:%.*]] = trunc i64 [[ARG1]] to i32
; CHECK-NEXT:    [[I3:%.*]] = add nsw i32 [[I2]], -1
; CHECK-NEXT:    [[I4:%.*]] = icmp sgt i32 [[I2]], 0
; CHECK-NEXT:    br i1 [[I4]], label [[BB5:%.*]], label [[BB100:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    [[I6:%.*]] = tail call i32 @llvm.amdgcn.workgroup.id.x() #[[ATTR4:[0-9]+]], !range [[RNG159:![0-9]+]]
; CHECK-NEXT:    [[I7:%.*]] = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    [[I8:%.*]] = getelementptr inbounds i8, ptr addrspace(4) [[I7]], i64 4
; CHECK-NEXT:    [[I9:%.*]] = load i16, ptr addrspace(4) [[I8]], align 4
; CHECK-NEXT:    [[I10:%.*]] = getelementptr inbounds i8, ptr addrspace(4) [[I7]], i64 12
; CHECK-NEXT:    [[I11:%.*]] = load i32, ptr addrspace(4) [[I10]], align 4, !invariant.load [[META158]]
; CHECK-NEXT:    [[I12:%.*]] = zext i16 [[I9]] to i32
; CHECK-NEXT:    [[I13:%.*]] = udiv i32 [[I11]], [[I12]]
; CHECK-NEXT:    [[I14:%.*]] = shl nsw i32 [[I6]], 8
; CHECK-NEXT:    [[I15:%.*]] = shl nsw i32 [[I13]], 8
; CHECK-NEXT:    [[I16:%.*]] = icmp slt i32 [[I14]], [[I2]]
; CHECK-NEXT:    br i1 [[I16]], label [[BB17:%.*]], label [[BB100]]
; CHECK:       bb17:
; CHECK-NEXT:    [[I18:%.*]] = or disjoint i32 [[I14]], 255
; CHECK-NEXT:    [[I19:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I18]], i32 [[I3]]), !range [[RNG160:![0-9]+]]
; CHECK-NEXT:    br label [[BB20:%.*]]
; CHECK:       bb20:
; CHECK-NEXT:    [[I61_REG2MEM_0:%.*]] = phi i64 [ undef, [[BB17]] ], [ [[I61_REG2MEM_5:%.*]], [[BB94:%.*]] ]
; CHECK-NEXT:    [[I86_REG2MEM_0:%.*]] = phi i64 [ undef, [[BB17]] ], [ [[I86_REG2MEM_5:%.*]], [[BB94]] ]
; CHECK-NEXT:    [[I21:%.*]] = phi i32 [ [[I19]], [[BB17]] ], [ [[I97:%.*]], [[BB94]] ]
; CHECK-NEXT:    [[I22:%.*]] = phi i32 [ [[I14]], [[BB17]] ], [ [[I95:%.*]], [[BB94]] ]
; CHECK-NEXT:    [[I23:%.*]] = add nsw i32 [[I22]], [[I]]
; CHECK-NEXT:    [[I24:%.*]] = icmp sgt i32 [[I23]], [[I21]]
; CHECK-NEXT:    br i1 [[I24]], label [[BB94]], label [[BB25:%.*]]
; CHECK:       bb25:
; CHECK-NEXT:    [[I26:%.*]] = load ptr, ptr addrspace(1) @_ZN6openmc10simulation16device_particlesE, align 8, !tbaa [[TBAA161:![0-9]+]], !llvm.access.group [[ACC_GRP165:![0-9]+]]
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_1:%.*]] = add nsw i32 [[I23]], [[I12]]
; CHECK-NEXT:    [[COARSENED_STEP:%.*]] = mul i32 [[I12]], 2
; CHECK-NEXT:    [[TMP0:%.*]] = sub i32 [[I21]], [[I23]]
; CHECK-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], [[I12]]
; CHECK-NEXT:    [[TMP2:%.*]] = sub i32 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = udiv i32 [[TMP2]], [[I12]]
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP3]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = mul nsw i32 [[TMP4]], 2
; CHECK-NEXT:    [[TMP6:%.*]] = mul nsw i32 [[TMP5]], [[I12]]
; CHECK-NEXT:    [[EPILOGUE_START_IV:%.*]] = add i32 [[TMP6]], [[I23]]
; CHECK-NEXT:    [[IS_EPILOGUE_START:%.*]] = icmp eq i32 [[I23]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    br i1 [[IS_EPILOGUE_START]], label [[BB27_EPILOGUE:%.*]], label [[BB27:%.*]]
; CHECK:       bb27:
; CHECK-NEXT:    [[I61_REG2MEM_1:%.*]] = phi i64 [ [[I61_REG2MEM_0]], [[BB25]] ], [ [[I61_REG2MEM_2:%.*]], [[BB90:%.*]] ]
; CHECK-NEXT:    [[I86_REG2MEM_1:%.*]] = phi i64 [ [[I86_REG2MEM_0]], [[BB25]] ], [ [[I86_REG2MEM_2:%.*]], [[BB90]] ]
; CHECK-NEXT:    [[I28:%.*]] = phi i32 [ [[I23]], [[BB25]] ], [ [[TMP7:%.*]], [[BB90]] ]
; CHECK-NEXT:    [[I28_COARSENED_1:%.*]] = phi i32 [ [[INITIAL_IV_COARSENED_1]], [[BB25]] ], [ [[DOTCOARSENED_1:%.*]], [[BB90]] ]
; CHECK-NEXT:    [[I29:%.*]] = sext i32 [[I28]] to i64
; CHECK-NEXT:    [[I29_COARSENED_1:%.*]] = sext i32 [[I28_COARSENED_1]] to i64
; CHECK-NEXT:    [[I30:%.*]] = add nsw i32 [[I28]], 1
; CHECK-NEXT:    [[I30_COARSENED_1:%.*]] = add nsw i32 [[I28_COARSENED_1]], 1
; CHECK-NEXT:    [[I31:%.*]] = sext i32 [[I30]] to i64
; CHECK-NEXT:    [[I31_COARSENED_1:%.*]] = sext i32 [[I30_COARSENED_1]] to i64
; CHECK-NEXT:    [[I32:%.*]] = getelementptr inbounds %"class.openmc::Particle", ptr [[I26]], i64 [[I29]], i32 3
; CHECK-NEXT:    [[I32_COARSENED_1:%.*]] = getelementptr inbounds %"class.openmc::Particle", ptr [[I26]], i64 [[I29_COARSENED_1]], i32 3
; CHECK-NEXT:    store i64 [[I31]], ptr [[I32]], align 8, !tbaa [[TBAA166:![0-9]+]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    store i64 [[I31_COARSENED_1]], ptr [[I32_COARSENED_1]], align 8, !tbaa [[TBAA166]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    [[I33:%.*]] = getelementptr inbounds %"class.openmc::Particle", ptr [[I26]], i64 [[I29]], i32 39
; CHECK-NEXT:    [[I33_COARSENED_1:%.*]] = getelementptr inbounds %"class.openmc::Particle", ptr [[I26]], i64 [[I29_COARSENED_1]], i32 39
; CHECK-NEXT:    [[I34:%.*]] = mul nsw i64 [[I31]], 152917
; CHECK-NEXT:    [[I34_COARSENED_1:%.*]] = mul nsw i64 [[I31_COARSENED_1]], 152917
; CHECK-NEXT:    [[I35:%.*]] = and i64 [[I34]], 9223372036854775807
; CHECK-NEXT:    [[I35_COARSENED_1:%.*]] = and i64 [[I34_COARSENED_1]], 9223372036854775807
; CHECK-NEXT:    [[I36:%.*]] = icmp eq i64 [[I35]], 0
; CHECK-NEXT:    [[I36_COARSENED_1:%.*]] = icmp eq i64 [[I35_COARSENED_1]], 0
; CHECK-NEXT:    br label [[BB37:%.*]]
; CHECK:       bb37:
; CHECK-NEXT:    [[I39:%.*]] = zext nneg i32 0 to i64
; CHECK-NEXT:    [[I39_COARSENED_1:%.*]] = zext nneg i32 0 to i64
; CHECK-NEXT:    br label [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_0:%.*]]
; CHECK:       bb60:
; CHECK-NEXT:    [[I62:%.*]] = getelementptr inbounds i64, ptr [[I33]], i64 [[I39]]
; CHECK-NEXT:    [[I62_COARSENED_1:%.*]] = getelementptr inbounds i64, ptr [[I33_COARSENED_1]], i64 [[I39_COARSENED_1]]
; CHECK-NEXT:    store i64 [[I61_REG2MEM_2]], ptr [[I62]], align 8, !tbaa [[TBAA183:![0-9]+]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    store i64 [[I61_DRS_0:%.*]], ptr [[I62_COARSENED_1]], align 8, !tbaa [[TBAA183]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    [[I63:%.*]] = or disjoint i32 0, 1
; CHECK-NEXT:    [[I63_COARSENED_1:%.*]] = or disjoint i32 0, 1
; CHECK-NEXT:    [[I64:%.*]] = zext nneg i32 [[I63]] to i64
; CHECK-NEXT:    [[I64_COARSENED_1:%.*]] = zext nneg i32 [[I63_COARSENED_1]] to i64
; CHECK-NEXT:    br label [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_0:%.*]]
; CHECK:       bb37.divergent.entry.drs.0.intro.0:
; CHECK-NEXT:    br label [[BB37_DIVERGENT_ENTRY_DRS_0:%.*]]
; CHECK:       bb37.divergent.entry.drs.0.intro.1:
; CHECK-NEXT:    br label [[BB37_DIVERGENT_ENTRY_DRS_0]]
; CHECK:       bb37.divergent.entry.drs.0:
; CHECK-NEXT:    [[DR_COARSENED_IDENT_0:%.*]] = phi i32 [ 0, [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ 1, [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_1:%.*]] ]
; CHECK-NEXT:    [[I61_REG2MEM_2]] = phi i64 [ [[I61_REG2MEM_1]], [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[I61_DRS_0]], [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ]
; CHECK-NEXT:    [[I36_DRS_0_REG2MEM_0:%.*]] = phi i1 [ [[I36]], [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[I36_COARSENED_1]], [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ]
; CHECK-NEXT:    [[I35_DRS_0_REG2MEM_0:%.*]] = phi i64 [ [[I35]], [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[I35_COARSENED_1]], [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ]
; CHECK-NEXT:    br i1 [[I36_DRS_0_REG2MEM_0]], label [[BB60_DIVERGENT_EXIT_DRS_0:%.*]], label [[BB40_DRS_0:%.*]]
; CHECK:       bb40.drs.0:
; CHECK-NEXT:    br label [[BB41_DRS_0:%.*]]
; CHECK:       bb41.drs.0:
; CHECK-NEXT:    [[I42_DRS_0:%.*]] = phi i64 [ [[I52_DRS_0:%.*]], [[BB51_DIVERGENT_ENTRY_DRS_0:%.*]] ], [ 0, [[BB40_DRS_0]] ]
; CHECK-NEXT:    [[I43_DRS_0:%.*]] = phi i64 [ [[I54_DRS_0:%.*]], [[BB51_DIVERGENT_ENTRY_DRS_0]] ], [ 1, [[BB40_DRS_0]] ]
; CHECK-NEXT:    [[I44_DRS_0:%.*]] = phi i64 [ [[I55_DRS_0:%.*]], [[BB51_DIVERGENT_ENTRY_DRS_0]] ], [ 2806196910506780709, [[BB40_DRS_0]] ]
; CHECK-NEXT:    [[I45_DRS_0:%.*]] = phi i64 [ [[I56_DRS_0:%.*]], [[BB51_DIVERGENT_ENTRY_DRS_0]] ], [ [[I35_DRS_0_REG2MEM_0]], [[BB40_DRS_0]] ]
; CHECK-NEXT:    [[I46_DRS_0:%.*]] = and i64 [[I45_DRS_0]], 1
; CHECK-NEXT:    [[I47_DRS_0:%.*]] = icmp eq i64 [[I46_DRS_0]], 0
; CHECK-NEXT:    br label [[BB41_DIVERGENT_ENTRY_DRS_0:%.*]]
; CHECK:       bb41.divergent.entry.drs.0:
; CHECK-NEXT:    br i1 [[I47_DRS_0]], label [[BB51_DIVERGENT_EXIT_DRS_0:%.*]], label [[BB48_DRS_0:%.*]]
; CHECK:       bb48.drs.0:
; CHECK-NEXT:    [[I49_DRS_0:%.*]] = mul i64 [[I44_DRS_0]], [[I42_DRS_0]]
; CHECK-NEXT:    [[I50_DRS_0:%.*]] = add i64 [[I49_DRS_0]], [[I43_DRS_0]]
; CHECK-NEXT:    br label [[BB51_DIVERGENT_EXIT_DRS_0]]
; CHECK:       bb51.divergent.exit.drs.0:
; CHECK-NEXT:    [[I52_DRS_0]] = phi i64 [ [[I50_DRS_0]], [[BB48_DRS_0]] ], [ [[I42_DRS_0]], [[BB41_DIVERGENT_ENTRY_DRS_0]] ]
; CHECK-NEXT:    br label [[BB51_DRS_0:%.*]]
; CHECK:       bb51.drs.0:
; CHECK-NEXT:    [[I53_DRS_0:%.*]] = add i64 [[I44_DRS_0]], 1
; CHECK-NEXT:    [[I54_DRS_0]] = mul i64 [[I53_DRS_0]], [[I43_DRS_0]]
; CHECK-NEXT:    [[I55_DRS_0]] = mul i64 [[I44_DRS_0]], [[I44_DRS_0]]
; CHECK-NEXT:    [[I56_DRS_0]] = lshr i64 [[I45_DRS_0]], 1
; CHECK-NEXT:    [[I57_DRS_0:%.*]] = icmp ult i64 [[I45_DRS_0]], 2
; CHECK-NEXT:    br label [[BB51_DIVERGENT_ENTRY_DRS_0]]
; CHECK:       bb51.divergent.entry.drs.0:
; CHECK-NEXT:    br i1 [[I57_DRS_0]], label [[BB58_DIVERGENT_EXIT_DRS_0:%.*]], label [[BB41_DRS_0]], !llvm.loop [[LOOP184:![0-9]+]]
; CHECK:       bb58.divergent.exit.drs.0:
; CHECK-NEXT:    [[I59_DRS_0:%.*]] = phi i64 [ [[I52_DRS_0]], [[BB51_DIVERGENT_ENTRY_DRS_0]] ]
; CHECK-NEXT:    br label [[BB58_DRS_0:%.*]]
; CHECK:       bb58.drs.0:
; CHECK-NEXT:    br label [[BB60_DIVERGENT_EXIT_DRS_0]]
; CHECK:       bb60.divergent.exit.drs.0:
; CHECK-NEXT:    [[I61_DRS_0]] = phi i64 [ 0, [[BB37_DIVERGENT_ENTRY_DRS_0]] ], [ [[I59_DRS_0]], [[BB58_DRS_0]] ]
; CHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT_0]], label [[BB60_DIVERGENT_EXIT_DRS_0_OUTRO_0:%.*]] [
; CHECK-NEXT:      i32 1, label [[BB60_DIVERGENT_EXIT_DRS_0_OUTRO_1:%.*]]
; CHECK-NEXT:    ]
; CHECK:       bb60.divergent.exit.drs.0.outro.0:
; CHECK-NEXT:    br label [[BB37_DIVERGENT_ENTRY_DRS_0_INTRO_1]]
; CHECK:       bb60.divergent.exit.drs.0.outro.1:
; CHECK-NEXT:    br label [[BB60:%.*]]
; CHECK:       bb85:
; CHECK-NEXT:    [[I87:%.*]] = getelementptr inbounds i64, ptr [[I33]], i64 [[I64]]
; CHECK-NEXT:    [[I87_COARSENED_1:%.*]] = getelementptr inbounds i64, ptr [[I33_COARSENED_1]], i64 [[I64_COARSENED_1]]
; CHECK-NEXT:    store i64 [[I86_REG2MEM_2]], ptr [[I87]], align 8, !tbaa [[TBAA183]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    store i64 [[I86_DRS_1:%.*]], ptr [[I87_COARSENED_1]], align 8, !tbaa [[TBAA183]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    [[I88:%.*]] = add nuw nsw i32 0, 2
; CHECK-NEXT:    [[I88_COARSENED_1:%.*]] = add nuw nsw i32 0, 2
; CHECK-NEXT:    [[I89:%.*]] = icmp eq i32 [[I88]], 8
; CHECK-NEXT:    [[I89_COARSENED_1:%.*]] = icmp eq i32 [[I88_COARSENED_1]], 8
; CHECK-NEXT:    br label [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_0:%.*]]
; CHECK:       bb60.divergent.entry.drs.1.intro.0:
; CHECK-NEXT:    br label [[BB60_DIVERGENT_ENTRY_DRS_1:%.*]]
; CHECK:       bb60.divergent.entry.drs.1.intro.1:
; CHECK-NEXT:    br label [[BB60_DIVERGENT_ENTRY_DRS_1]]
; CHECK:       bb60.divergent.entry.drs.1:
; CHECK-NEXT:    [[I86_REG2MEM_2]] = phi i64 [ [[I86_REG2MEM_1]], [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ [[I86_DRS_1]], [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_1:%.*]] ]
; CHECK-NEXT:    [[DR_COARSENED_IDENT16_0:%.*]] = phi i32 [ 0, [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ 1, [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_1]] ]
; CHECK-NEXT:    [[I36_DRS_1_REG2MEM_0:%.*]] = phi i1 [ [[I36]], [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ [[I36_COARSENED_1]], [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_1]] ]
; CHECK-NEXT:    [[I35_DRS_1_REG2MEM_0:%.*]] = phi i64 [ [[I35]], [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ [[I35_COARSENED_1]], [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_1]] ]
; CHECK-NEXT:    br i1 [[I36_DRS_1_REG2MEM_0]], label [[BB85_DIVERGENT_EXIT_DRS_1:%.*]], label [[BB65_DRS_1:%.*]]
; CHECK:       bb65.drs.1:
; CHECK-NEXT:    br label [[BB66_DRS_1:%.*]]
; CHECK:       bb66.drs.1:
; CHECK-NEXT:    [[I67_DRS_1:%.*]] = phi i64 [ [[I77_DRS_1:%.*]], [[BB76_DIVERGENT_ENTRY_DRS_1:%.*]] ], [ 0, [[BB65_DRS_1]] ]
; CHECK-NEXT:    [[I68_DRS_1:%.*]] = phi i64 [ [[I79_DRS_1:%.*]], [[BB76_DIVERGENT_ENTRY_DRS_1]] ], [ 1, [[BB65_DRS_1]] ]
; CHECK-NEXT:    [[I69_DRS_1:%.*]] = phi i64 [ [[I80_DRS_1:%.*]], [[BB76_DIVERGENT_ENTRY_DRS_1]] ], [ 2806196910506780709, [[BB65_DRS_1]] ]
; CHECK-NEXT:    [[I70_DRS_1:%.*]] = phi i64 [ [[I81_DRS_1:%.*]], [[BB76_DIVERGENT_ENTRY_DRS_1]] ], [ [[I35_DRS_1_REG2MEM_0]], [[BB65_DRS_1]] ]
; CHECK-NEXT:    [[I71_DRS_1:%.*]] = and i64 [[I70_DRS_1]], 1
; CHECK-NEXT:    [[I72_DRS_1:%.*]] = icmp eq i64 [[I71_DRS_1]], 0
; CHECK-NEXT:    br label [[BB66_DIVERGENT_ENTRY_DRS_1:%.*]]
; CHECK:       bb66.divergent.entry.drs.1:
; CHECK-NEXT:    br i1 [[I72_DRS_1]], label [[BB76_DIVERGENT_EXIT_DRS_1:%.*]], label [[BB73_DRS_1:%.*]]
; CHECK:       bb73.drs.1:
; CHECK-NEXT:    [[I74_DRS_1:%.*]] = mul i64 [[I69_DRS_1]], [[I67_DRS_1]]
; CHECK-NEXT:    [[I75_DRS_1:%.*]] = add i64 [[I74_DRS_1]], [[I68_DRS_1]]
; CHECK-NEXT:    br label [[BB76_DIVERGENT_EXIT_DRS_1]]
; CHECK:       bb76.divergent.exit.drs.1:
; CHECK-NEXT:    [[I77_DRS_1]] = phi i64 [ [[I75_DRS_1]], [[BB73_DRS_1]] ], [ [[I67_DRS_1]], [[BB66_DIVERGENT_ENTRY_DRS_1]] ]
; CHECK-NEXT:    br label [[BB76_DRS_1:%.*]]
; CHECK:       bb76.drs.1:
; CHECK-NEXT:    [[I78_DRS_1:%.*]] = add i64 [[I69_DRS_1]], 1
; CHECK-NEXT:    [[I79_DRS_1]] = mul i64 [[I78_DRS_1]], [[I68_DRS_1]]
; CHECK-NEXT:    [[I80_DRS_1]] = mul i64 [[I69_DRS_1]], [[I69_DRS_1]]
; CHECK-NEXT:    [[I81_DRS_1]] = lshr i64 [[I70_DRS_1]], 1
; CHECK-NEXT:    [[I82_DRS_1:%.*]] = icmp ult i64 [[I70_DRS_1]], 2
; CHECK-NEXT:    br label [[BB76_DIVERGENT_ENTRY_DRS_1]]
; CHECK:       bb76.divergent.entry.drs.1:
; CHECK-NEXT:    br i1 [[I82_DRS_1]], label [[BB83_DIVERGENT_EXIT_DRS_1:%.*]], label [[BB66_DRS_1]], !llvm.loop [[LOOP187:![0-9]+]]
; CHECK:       bb83.divergent.exit.drs.1:
; CHECK-NEXT:    [[I84_DRS_1:%.*]] = phi i64 [ [[I77_DRS_1]], [[BB76_DIVERGENT_ENTRY_DRS_1]] ]
; CHECK-NEXT:    br label [[BB83_DRS_1:%.*]]
; CHECK:       bb83.drs.1:
; CHECK-NEXT:    br label [[BB85_DIVERGENT_EXIT_DRS_1]]
; CHECK:       bb85.divergent.exit.drs.1:
; CHECK-NEXT:    [[I86_DRS_1]] = phi i64 [ 0, [[BB60_DIVERGENT_ENTRY_DRS_1]] ], [ [[I84_DRS_1]], [[BB83_DRS_1]] ]
; CHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT16_0]], label [[BB85_DIVERGENT_EXIT_DRS_1_OUTRO_0:%.*]] [
; CHECK-NEXT:      i32 1, label [[BB85_DIVERGENT_EXIT_DRS_1_OUTRO_1:%.*]]
; CHECK-NEXT:    ]
; CHECK:       bb85.divergent.exit.drs.1.outro.0:
; CHECK-NEXT:    br label [[BB60_DIVERGENT_ENTRY_DRS_1_INTRO_1]]
; CHECK:       bb85.divergent.exit.drs.1.outro.1:
; CHECK-NEXT:    br label [[BB85:%.*]]
; CHECK:       bb90:
; CHECK-NEXT:    [[TMP7]] = add nsw i32 [[I28]], [[COARSENED_STEP]]
; CHECK-NEXT:    [[DOTCOARSENED_1]] = add nsw i32 [[I28_COARSENED_1]], [[COARSENED_STEP]]
; CHECK-NEXT:    [[I91:%.*]] = add nsw i32 [[I28]], [[I12]]
; CHECK-NEXT:    [[I91_COARSENED_1:%.*]] = add nsw i32 [[I28_COARSENED_1]], [[I12]]
; CHECK-NEXT:    [[I92:%.*]] = icmp sgt i32 [[I91]], [[I21]]
; CHECK-NEXT:    [[I92_COARSENED_1:%.*]] = icmp sgt i32 [[I91_COARSENED_1]], [[I21]]
; CHECK-NEXT:    [[TMP8:%.*]] = icmp sgt i32 [[TMP7]], [[I21]]
; CHECK-NEXT:    [[DOTCOARSENED_12:%.*]] = icmp sgt i32 [[DOTCOARSENED_1]], [[I21]]
; CHECK-NEXT:    [[IS_EPILOGUE_START1:%.*]] = icmp eq i32 [[TMP7]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    [[IS_EPILOGUE_START1_COARSENED_1:%.*]] = icmp eq i32 [[DOTCOARSENED_1]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    br i1 [[IS_EPILOGUE_START1]], label [[COARSENED_END_CHECK:%.*]], label [[BB27]], !llvm.loop [[LOOP188:![0-9]+]]
; CHECK:       bb37.drs.2:
; CHECK-NEXT:    [[I39_DRS_2:%.*]] = zext nneg i32 [[I88_DRS_2_REG2MEM_0:%.*]] to i64
; CHECK-NEXT:    br label [[BB37_DIVERGENT_ENTRY_DRS_2:%.*]]
; CHECK:       bb37.divergent.entry.drs.2:
; CHECK-NEXT:    br i1 [[I36_DRS_2_REG2MEM_0:%.*]], label [[BB60_DIVERGENT_EXIT_DRS_2:%.*]], label [[BB40_DRS_2:%.*]]
; CHECK:       bb40.drs.2:
; CHECK-NEXT:    br label [[BB41_DRS_2:%.*]]
; CHECK:       bb41.drs.2:
; CHECK-NEXT:    [[I42_DRS_2:%.*]] = phi i64 [ [[I52_DRS_2:%.*]], [[BB51_DIVERGENT_ENTRY_DRS_2:%.*]] ], [ 0, [[BB40_DRS_2]] ]
; CHECK-NEXT:    [[I43_DRS_2:%.*]] = phi i64 [ [[I54_DRS_2:%.*]], [[BB51_DIVERGENT_ENTRY_DRS_2]] ], [ 1, [[BB40_DRS_2]] ]
; CHECK-NEXT:    [[I44_DRS_2:%.*]] = phi i64 [ [[I55_DRS_2:%.*]], [[BB51_DIVERGENT_ENTRY_DRS_2]] ], [ 2806196910506780709, [[BB40_DRS_2]] ]
; CHECK-NEXT:    [[I45_DRS_2:%.*]] = phi i64 [ [[I56_DRS_2:%.*]], [[BB51_DIVERGENT_ENTRY_DRS_2]] ], [ [[I35_DRS_2_REG2MEM_0:%.*]], [[BB40_DRS_2]] ]
; CHECK-NEXT:    [[I46_DRS_2:%.*]] = and i64 [[I45_DRS_2]], 1
; CHECK-NEXT:    [[I47_DRS_2:%.*]] = icmp eq i64 [[I46_DRS_2]], 0
; CHECK-NEXT:    br label [[BB41_DIVERGENT_ENTRY_DRS_2:%.*]]
; CHECK:       bb41.divergent.entry.drs.2:
; CHECK-NEXT:    br i1 [[I47_DRS_2]], label [[BB51_DIVERGENT_EXIT_DRS_2:%.*]], label [[BB48_DRS_2:%.*]]
; CHECK:       bb48.drs.2:
; CHECK-NEXT:    [[I49_DRS_2:%.*]] = mul i64 [[I44_DRS_2]], [[I42_DRS_2]]
; CHECK-NEXT:    [[I50_DRS_2:%.*]] = add i64 [[I49_DRS_2]], [[I43_DRS_2]]
; CHECK-NEXT:    br label [[BB51_DIVERGENT_EXIT_DRS_2]]
; CHECK:       bb51.divergent.exit.drs.2:
; CHECK-NEXT:    [[I52_DRS_2]] = phi i64 [ [[I50_DRS_2]], [[BB48_DRS_2]] ], [ [[I42_DRS_2]], [[BB41_DIVERGENT_ENTRY_DRS_2]] ]
; CHECK-NEXT:    br label [[BB51_DRS_2:%.*]]
; CHECK:       bb51.drs.2:
; CHECK-NEXT:    [[I53_DRS_2:%.*]] = add i64 [[I44_DRS_2]], 1
; CHECK-NEXT:    [[I54_DRS_2]] = mul i64 [[I53_DRS_2]], [[I43_DRS_2]]
; CHECK-NEXT:    [[I55_DRS_2]] = mul i64 [[I44_DRS_2]], [[I44_DRS_2]]
; CHECK-NEXT:    [[I56_DRS_2]] = lshr i64 [[I45_DRS_2]], 1
; CHECK-NEXT:    [[I57_DRS_2:%.*]] = icmp ult i64 [[I45_DRS_2]], 2
; CHECK-NEXT:    br label [[BB51_DIVERGENT_ENTRY_DRS_2]]
; CHECK:       bb51.divergent.entry.drs.2:
; CHECK-NEXT:    br i1 [[I57_DRS_2]], label [[BB58_DIVERGENT_EXIT_DRS_2:%.*]], label [[BB41_DRS_2]], !llvm.loop [[LOOP184]]
; CHECK:       bb58.divergent.exit.drs.2:
; CHECK-NEXT:    [[I59_DRS_2:%.*]] = phi i64 [ [[I52_DRS_2]], [[BB51_DIVERGENT_ENTRY_DRS_2]] ]
; CHECK-NEXT:    br label [[BB58_DRS_2:%.*]]
; CHECK:       bb58.drs.2:
; CHECK-NEXT:    br label [[BB60_DIVERGENT_EXIT_DRS_2]]
; CHECK:       bb60.divergent.exit.drs.2:
; CHECK-NEXT:    [[I61_DRS_2:%.*]] = phi i64 [ 0, [[BB37_DIVERGENT_ENTRY_DRS_2]] ], [ [[I59_DRS_2]], [[BB58_DRS_2]] ]
; CHECK-NEXT:    br label [[BB60_DRS_2:%.*]]
; CHECK:       bb60.drs.2:
; CHECK-NEXT:    [[I62_DRS_2:%.*]] = getelementptr inbounds i64, ptr [[I33_DRS_2_REG2MEM_0:%.*]], i64 [[I39_DRS_2]]
; CHECK-NEXT:    store i64 [[I61_DRS_2]], ptr [[I62_DRS_2]], align 8, !tbaa [[TBAA183]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    [[I63_DRS_2:%.*]] = or disjoint i32 [[I88_DRS_2_REG2MEM_0]], 1
; CHECK-NEXT:    [[I64_DRS_2:%.*]] = zext nneg i32 [[I63_DRS_2]] to i64
; CHECK-NEXT:    br label [[BB60_DIVERGENT_ENTRY_DRS_2:%.*]]
; CHECK:       bb60.divergent.entry.drs.2:
; CHECK-NEXT:    br i1 [[I36_DRS_2_REG2MEM_0]], label [[BB85_DIVERGENT_EXIT_DRS_2:%.*]], label [[BB65_DRS_2:%.*]]
; CHECK:       bb65.drs.2:
; CHECK-NEXT:    br label [[BB66_DRS_2:%.*]]
; CHECK:       bb66.drs.2:
; CHECK-NEXT:    [[I67_DRS_2:%.*]] = phi i64 [ [[I77_DRS_2:%.*]], [[BB76_DIVERGENT_ENTRY_DRS_2:%.*]] ], [ 0, [[BB65_DRS_2]] ]
; CHECK-NEXT:    [[I68_DRS_2:%.*]] = phi i64 [ [[I79_DRS_2:%.*]], [[BB76_DIVERGENT_ENTRY_DRS_2]] ], [ 1, [[BB65_DRS_2]] ]
; CHECK-NEXT:    [[I69_DRS_2:%.*]] = phi i64 [ [[I80_DRS_2:%.*]], [[BB76_DIVERGENT_ENTRY_DRS_2]] ], [ 2806196910506780709, [[BB65_DRS_2]] ]
; CHECK-NEXT:    [[I70_DRS_2:%.*]] = phi i64 [ [[I81_DRS_2:%.*]], [[BB76_DIVERGENT_ENTRY_DRS_2]] ], [ [[I35_DRS_2_REG2MEM_0]], [[BB65_DRS_2]] ]
; CHECK-NEXT:    [[I71_DRS_2:%.*]] = and i64 [[I70_DRS_2]], 1
; CHECK-NEXT:    [[I72_DRS_2:%.*]] = icmp eq i64 [[I71_DRS_2]], 0
; CHECK-NEXT:    br label [[BB66_DIVERGENT_ENTRY_DRS_2:%.*]]
; CHECK:       bb66.divergent.entry.drs.2:
; CHECK-NEXT:    br i1 [[I72_DRS_2]], label [[BB76_DIVERGENT_EXIT_DRS_2:%.*]], label [[BB73_DRS_2:%.*]]
; CHECK:       bb73.drs.2:
; CHECK-NEXT:    [[I74_DRS_2:%.*]] = mul i64 [[I69_DRS_2]], [[I67_DRS_2]]
; CHECK-NEXT:    [[I75_DRS_2:%.*]] = add i64 [[I74_DRS_2]], [[I68_DRS_2]]
; CHECK-NEXT:    br label [[BB76_DIVERGENT_EXIT_DRS_2]]
; CHECK:       bb76.divergent.exit.drs.2:
; CHECK-NEXT:    [[I77_DRS_2]] = phi i64 [ [[I75_DRS_2]], [[BB73_DRS_2]] ], [ [[I67_DRS_2]], [[BB66_DIVERGENT_ENTRY_DRS_2]] ]
; CHECK-NEXT:    br label [[BB76_DRS_2:%.*]]
; CHECK:       bb76.drs.2:
; CHECK-NEXT:    [[I78_DRS_2:%.*]] = add i64 [[I69_DRS_2]], 1
; CHECK-NEXT:    [[I79_DRS_2]] = mul i64 [[I78_DRS_2]], [[I68_DRS_2]]
; CHECK-NEXT:    [[I80_DRS_2]] = mul i64 [[I69_DRS_2]], [[I69_DRS_2]]
; CHECK-NEXT:    [[I81_DRS_2]] = lshr i64 [[I70_DRS_2]], 1
; CHECK-NEXT:    [[I82_DRS_2:%.*]] = icmp ult i64 [[I70_DRS_2]], 2
; CHECK-NEXT:    br label [[BB76_DIVERGENT_ENTRY_DRS_2]]
; CHECK:       bb76.divergent.entry.drs.2:
; CHECK-NEXT:    br i1 [[I82_DRS_2]], label [[BB83_DIVERGENT_EXIT_DRS_2:%.*]], label [[BB66_DRS_2]], !llvm.loop [[LOOP187]]
; CHECK:       bb83.divergent.exit.drs.2:
; CHECK-NEXT:    [[I84_DRS_2:%.*]] = phi i64 [ [[I77_DRS_2]], [[BB76_DIVERGENT_ENTRY_DRS_2]] ]
; CHECK-NEXT:    br label [[BB83_DRS_2:%.*]]
; CHECK:       bb83.drs.2:
; CHECK-NEXT:    br label [[BB85_DIVERGENT_EXIT_DRS_2]]
; CHECK:       bb85.divergent.exit.drs.2:
; CHECK-NEXT:    [[I86_DRS_2:%.*]] = phi i64 [ 0, [[BB60_DIVERGENT_ENTRY_DRS_2]] ], [ [[I84_DRS_2]], [[BB83_DRS_2]] ]
; CHECK-NEXT:    br label [[BB85_DRS_2:%.*]]
; CHECK:       bb85.drs.2:
; CHECK-NEXT:    [[I87_DRS_2:%.*]] = getelementptr inbounds i64, ptr [[I33_DRS_2_REG2MEM_0]], i64 [[I64_DRS_2]]
; CHECK-NEXT:    store i64 [[I86_DRS_2]], ptr [[I87_DRS_2]], align 8, !tbaa [[TBAA183]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    [[I88_DRS_2:%.*]] = add nuw nsw i32 [[I88_DRS_2_REG2MEM_0]], 2
; CHECK-NEXT:    [[I89_DRS_2:%.*]] = icmp eq i32 [[I88_DRS_2]], 8
; CHECK-NEXT:    br label [[BB85_DIVERGENT_ENTRY_DRS_2:%.*]]
; CHECK:       bb85.divergent.entry.drs.2.intro.0:
; CHECK-NEXT:    br label [[BB85_DIVERGENT_ENTRY_DRS_2]]
; CHECK:       bb85.divergent.entry.drs.2.intro.1:
; CHECK-NEXT:    br label [[BB85_DIVERGENT_ENTRY_DRS_2]]
; CHECK:       bb85.divergent.entry.drs.2:
; CHECK-NEXT:    [[I36_DRS_2_REG2MEM_0]] = phi i1 [ [[I36]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_0]] ], [ [[I36_COARSENED_1]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_1:%.*]] ], [ [[I36_DRS_2_REG2MEM_0]], [[BB85_DRS_2]] ]
; CHECK-NEXT:    [[I35_DRS_2_REG2MEM_0]] = phi i64 [ [[I35]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_0]] ], [ [[I35_COARSENED_1]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_1]] ], [ [[I35_DRS_2_REG2MEM_0]], [[BB85_DRS_2]] ]
; CHECK-NEXT:    [[I33_DRS_2_REG2MEM_0]] = phi ptr [ [[I33]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_0]] ], [ [[I33_COARSENED_1]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_1]] ], [ [[I33_DRS_2_REG2MEM_0]], [[BB85_DRS_2]] ]
; CHECK-NEXT:    [[I89_DRS_2_REG2MEM_0:%.*]] = phi i1 [ [[I89]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_0]] ], [ [[I89_COARSENED_1]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_1]] ], [ [[I89_DRS_2]], [[BB85_DRS_2]] ]
; CHECK-NEXT:    [[I88_DRS_2_REG2MEM_0]] = phi i32 [ [[I88]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_0]] ], [ [[I88_COARSENED_1]], [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_1]] ], [ [[I88_DRS_2]], [[BB85_DRS_2]] ]
; CHECK-NEXT:    [[DR_COARSENED_IDENT18_0:%.*]] = phi i32 [ 0, [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_0]] ], [ 1, [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_1]] ], [ [[DR_COARSENED_IDENT18_0]], [[BB85_DRS_2]] ]
; CHECK-NEXT:    br i1 [[I89_DRS_2_REG2MEM_0]], label [[BB90_DIVERGENT_EXIT_DRS_2:%.*]], label [[BB37_DRS_2:%.*]], !llvm.loop [[LOOP190:![0-9]+]]
; CHECK:       bb90.divergent.exit.drs.2:
; CHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT18_0]], label [[BB90_DIVERGENT_EXIT_DRS_2_OUTRO_0:%.*]] [
; CHECK-NEXT:      i32 1, label [[BB90_DIVERGENT_EXIT_DRS_2_OUTRO_1:%.*]]
; CHECK-NEXT:    ]
; CHECK:       bb90.divergent.exit.drs.2.outro.0:
; CHECK-NEXT:    br label [[BB85_DIVERGENT_ENTRY_DRS_2_INTRO_1]]
; CHECK:       bb90.divergent.exit.drs.2.outro.1:
; CHECK-NEXT:    br label [[BB90]]
; CHECK:       coarsened.end.check:
; CHECK-NEXT:    br i1 [[TMP8]], label [[BB93:%.*]], label [[BB27_EPILOGUE]]
; CHECK:       bb27.epilogue:
; CHECK-NEXT:    [[I61_REG2MEM_3:%.*]] = phi i64 [ [[I61_REG2MEM_0]], [[BB25]] ], [ [[I61_REG2MEM_3]], [[BB90_EPILOGUE:%.*]] ], [ [[I61_REG2MEM_2]], [[COARSENED_END_CHECK]] ]
; CHECK-NEXT:    [[I86_REG2MEM_3:%.*]] = phi i64 [ [[I86_REG2MEM_0]], [[BB25]] ], [ [[I86_REG2MEM_3]], [[BB90_EPILOGUE]] ], [ [[I86_REG2MEM_2]], [[COARSENED_END_CHECK]] ]
; CHECK-NEXT:    [[I28_EPILOGUE:%.*]] = phi i32 [ [[TMP7]], [[COARSENED_END_CHECK]] ], [ [[I91_EPILOGUE:%.*]], [[BB90_EPILOGUE]] ], [ [[I23]], [[BB25]] ]
; CHECK-NEXT:    [[I29_EPILOGUE:%.*]] = sext i32 [[I28_EPILOGUE]] to i64
; CHECK-NEXT:    [[I30_EPILOGUE:%.*]] = add nsw i32 [[I28_EPILOGUE]], 1
; CHECK-NEXT:    [[I31_EPILOGUE:%.*]] = sext i32 [[I30_EPILOGUE]] to i64
; CHECK-NEXT:    [[I32_EPILOGUE:%.*]] = getelementptr inbounds %"class.openmc::Particle", ptr [[I26]], i64 [[I29_EPILOGUE]], i32 3
; CHECK-NEXT:    store i64 [[I31_EPILOGUE]], ptr [[I32_EPILOGUE]], align 8, !tbaa [[TBAA166]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    [[I33_EPILOGUE:%.*]] = getelementptr inbounds %"class.openmc::Particle", ptr [[I26]], i64 [[I29_EPILOGUE]], i32 39
; CHECK-NEXT:    [[I34_EPILOGUE:%.*]] = mul nsw i64 [[I31_EPILOGUE]], 152917
; CHECK-NEXT:    [[I35_EPILOGUE:%.*]] = and i64 [[I34_EPILOGUE]], 9223372036854775807
; CHECK-NEXT:    [[I36_EPILOGUE:%.*]] = icmp eq i64 [[I35_EPILOGUE]], 0
; CHECK-NEXT:    br label [[BB37_EPILOGUE:%.*]]
; CHECK:       bb37.epilogue:
; CHECK-NEXT:    [[I38_EPILOGUE:%.*]] = phi i32 [ 0, [[BB27_EPILOGUE]] ], [ [[I88_EPILOGUE:%.*]], [[BB85_EPILOGUE:%.*]] ]
; CHECK-NEXT:    [[I39_EPILOGUE:%.*]] = zext nneg i32 [[I38_EPILOGUE]] to i64
; CHECK-NEXT:    br i1 [[I36_EPILOGUE]], label [[BB60_EPILOGUE:%.*]], label [[BB40_EPILOGUE:%.*]]
; CHECK:       bb40.epilogue:
; CHECK-NEXT:    br label [[BB41_EPILOGUE:%.*]]
; CHECK:       bb41.epilogue:
; CHECK-NEXT:    [[I42_EPILOGUE:%.*]] = phi i64 [ [[I52_EPILOGUE:%.*]], [[BB51_EPILOGUE:%.*]] ], [ 0, [[BB40_EPILOGUE]] ]
; CHECK-NEXT:    [[I43_EPILOGUE:%.*]] = phi i64 [ [[I54_EPILOGUE:%.*]], [[BB51_EPILOGUE]] ], [ 1, [[BB40_EPILOGUE]] ]
; CHECK-NEXT:    [[I44_EPILOGUE:%.*]] = phi i64 [ [[I55_EPILOGUE:%.*]], [[BB51_EPILOGUE]] ], [ 2806196910506780709, [[BB40_EPILOGUE]] ]
; CHECK-NEXT:    [[I45_EPILOGUE:%.*]] = phi i64 [ [[I56_EPILOGUE:%.*]], [[BB51_EPILOGUE]] ], [ [[I35_EPILOGUE]], [[BB40_EPILOGUE]] ]
; CHECK-NEXT:    [[I46_EPILOGUE:%.*]] = and i64 [[I45_EPILOGUE]], 1
; CHECK-NEXT:    [[I47_EPILOGUE:%.*]] = icmp eq i64 [[I46_EPILOGUE]], 0
; CHECK-NEXT:    br i1 [[I47_EPILOGUE]], label [[BB51_EPILOGUE]], label [[BB48_EPILOGUE:%.*]]
; CHECK:       bb48.epilogue:
; CHECK-NEXT:    [[I49_EPILOGUE:%.*]] = mul i64 [[I44_EPILOGUE]], [[I42_EPILOGUE]]
; CHECK-NEXT:    [[I50_EPILOGUE:%.*]] = add i64 [[I49_EPILOGUE]], [[I43_EPILOGUE]]
; CHECK-NEXT:    br label [[BB51_EPILOGUE]]
; CHECK:       bb51.epilogue:
; CHECK-NEXT:    [[I52_EPILOGUE]] = phi i64 [ [[I50_EPILOGUE]], [[BB48_EPILOGUE]] ], [ [[I42_EPILOGUE]], [[BB41_EPILOGUE]] ]
; CHECK-NEXT:    [[I53_EPILOGUE:%.*]] = add i64 [[I44_EPILOGUE]], 1
; CHECK-NEXT:    [[I54_EPILOGUE]] = mul i64 [[I53_EPILOGUE]], [[I43_EPILOGUE]]
; CHECK-NEXT:    [[I55_EPILOGUE]] = mul i64 [[I44_EPILOGUE]], [[I44_EPILOGUE]]
; CHECK-NEXT:    [[I56_EPILOGUE]] = lshr i64 [[I45_EPILOGUE]], 1
; CHECK-NEXT:    [[I57_EPILOGUE:%.*]] = icmp ult i64 [[I45_EPILOGUE]], 2
; CHECK-NEXT:    br i1 [[I57_EPILOGUE]], label [[BB58_EPILOGUE:%.*]], label [[BB41_EPILOGUE]], !llvm.loop [[LOOP184]]
; CHECK:       bb58.epilogue:
; CHECK-NEXT:    [[I59_EPILOGUE:%.*]] = phi i64 [ [[I52_EPILOGUE]], [[BB51_EPILOGUE]] ]
; CHECK-NEXT:    br label [[BB60_EPILOGUE]]
; CHECK:       bb60.epilogue:
; CHECK-NEXT:    [[I61_EPILOGUE:%.*]] = phi i64 [ 0, [[BB37_EPILOGUE]] ], [ [[I59_EPILOGUE]], [[BB58_EPILOGUE]] ]
; CHECK-NEXT:    [[I62_EPILOGUE:%.*]] = getelementptr inbounds i64, ptr [[I33_EPILOGUE]], i64 [[I39_EPILOGUE]]
; CHECK-NEXT:    store i64 [[I61_EPILOGUE]], ptr [[I62_EPILOGUE]], align 8, !tbaa [[TBAA183]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    [[I63_EPILOGUE:%.*]] = or disjoint i32 [[I38_EPILOGUE]], 1
; CHECK-NEXT:    [[I64_EPILOGUE:%.*]] = zext nneg i32 [[I63_EPILOGUE]] to i64
; CHECK-NEXT:    br i1 [[I36_EPILOGUE]], label [[BB85_EPILOGUE]], label [[BB65_EPILOGUE:%.*]]
; CHECK:       bb65.epilogue:
; CHECK-NEXT:    br label [[BB66_EPILOGUE:%.*]]
; CHECK:       bb66.epilogue:
; CHECK-NEXT:    [[I67_EPILOGUE:%.*]] = phi i64 [ [[I77_EPILOGUE:%.*]], [[BB76_EPILOGUE:%.*]] ], [ 0, [[BB65_EPILOGUE]] ]
; CHECK-NEXT:    [[I68_EPILOGUE:%.*]] = phi i64 [ [[I79_EPILOGUE:%.*]], [[BB76_EPILOGUE]] ], [ 1, [[BB65_EPILOGUE]] ]
; CHECK-NEXT:    [[I69_EPILOGUE:%.*]] = phi i64 [ [[I80_EPILOGUE:%.*]], [[BB76_EPILOGUE]] ], [ 2806196910506780709, [[BB65_EPILOGUE]] ]
; CHECK-NEXT:    [[I70_EPILOGUE:%.*]] = phi i64 [ [[I81_EPILOGUE:%.*]], [[BB76_EPILOGUE]] ], [ [[I35_EPILOGUE]], [[BB65_EPILOGUE]] ]
; CHECK-NEXT:    [[I71_EPILOGUE:%.*]] = and i64 [[I70_EPILOGUE]], 1
; CHECK-NEXT:    [[I72_EPILOGUE:%.*]] = icmp eq i64 [[I71_EPILOGUE]], 0
; CHECK-NEXT:    br i1 [[I72_EPILOGUE]], label [[BB76_EPILOGUE]], label [[BB73_EPILOGUE:%.*]]
; CHECK:       bb73.epilogue:
; CHECK-NEXT:    [[I74_EPILOGUE:%.*]] = mul i64 [[I69_EPILOGUE]], [[I67_EPILOGUE]]
; CHECK-NEXT:    [[I75_EPILOGUE:%.*]] = add i64 [[I74_EPILOGUE]], [[I68_EPILOGUE]]
; CHECK-NEXT:    br label [[BB76_EPILOGUE]]
; CHECK:       bb76.epilogue:
; CHECK-NEXT:    [[I77_EPILOGUE]] = phi i64 [ [[I75_EPILOGUE]], [[BB73_EPILOGUE]] ], [ [[I67_EPILOGUE]], [[BB66_EPILOGUE]] ]
; CHECK-NEXT:    [[I78_EPILOGUE:%.*]] = add i64 [[I69_EPILOGUE]], 1
; CHECK-NEXT:    [[I79_EPILOGUE]] = mul i64 [[I78_EPILOGUE]], [[I68_EPILOGUE]]
; CHECK-NEXT:    [[I80_EPILOGUE]] = mul i64 [[I69_EPILOGUE]], [[I69_EPILOGUE]]
; CHECK-NEXT:    [[I81_EPILOGUE]] = lshr i64 [[I70_EPILOGUE]], 1
; CHECK-NEXT:    [[I82_EPILOGUE:%.*]] = icmp ult i64 [[I70_EPILOGUE]], 2
; CHECK-NEXT:    br i1 [[I82_EPILOGUE]], label [[BB83_EPILOGUE:%.*]], label [[BB66_EPILOGUE]], !llvm.loop [[LOOP187]]
; CHECK:       bb83.epilogue:
; CHECK-NEXT:    [[I84_EPILOGUE:%.*]] = phi i64 [ [[I77_EPILOGUE]], [[BB76_EPILOGUE]] ]
; CHECK-NEXT:    br label [[BB85_EPILOGUE]]
; CHECK:       bb85.epilogue:
; CHECK-NEXT:    [[I86_EPILOGUE:%.*]] = phi i64 [ 0, [[BB60_EPILOGUE]] ], [ [[I84_EPILOGUE]], [[BB83_EPILOGUE]] ]
; CHECK-NEXT:    [[I87_EPILOGUE:%.*]] = getelementptr inbounds i64, ptr [[I33_EPILOGUE]], i64 [[I64_EPILOGUE]]
; CHECK-NEXT:    store i64 [[I86_EPILOGUE]], ptr [[I87_EPILOGUE]], align 8, !tbaa [[TBAA183]], !llvm.access.group [[ACC_GRP165]]
; CHECK-NEXT:    [[I88_EPILOGUE]] = add nuw nsw i32 [[I38_EPILOGUE]], 2
; CHECK-NEXT:    [[I89_EPILOGUE:%.*]] = icmp eq i32 [[I88_EPILOGUE]], 8
; CHECK-NEXT:    br i1 [[I89_EPILOGUE]], label [[BB90_EPILOGUE]], label [[BB37_EPILOGUE]], !llvm.loop [[LOOP190]]
; CHECK:       bb90.epilogue:
; CHECK-NEXT:    [[I91_EPILOGUE]] = add nsw i32 [[I28_EPILOGUE]], [[I12]]
; CHECK-NEXT:    [[I92_EPILOGUE:%.*]] = icmp sgt i32 [[I91_EPILOGUE]], [[I21]]
; CHECK-NEXT:    br i1 [[I92_EPILOGUE]], label [[BB93]], label [[BB27_EPILOGUE]], !llvm.loop [[LOOP191:![0-9]+]]
; CHECK:       bb93:
; CHECK-NEXT:    [[I61_REG2MEM_4:%.*]] = phi i64 [ [[I61_REG2MEM_3]], [[BB90_EPILOGUE]] ], [ [[I61_REG2MEM_2]], [[COARSENED_END_CHECK]] ]
; CHECK-NEXT:    [[I86_REG2MEM_4:%.*]] = phi i64 [ [[I86_REG2MEM_3]], [[BB90_EPILOGUE]] ], [ [[I86_REG2MEM_2]], [[COARSENED_END_CHECK]] ]
; CHECK-NEXT:    br label [[BB94]]
; CHECK:       bb94:
; CHECK-NEXT:    [[I61_REG2MEM_5]] = phi i64 [ [[I61_REG2MEM_0]], [[BB20]] ], [ [[I61_REG2MEM_4]], [[BB93]] ]
; CHECK-NEXT:    [[I86_REG2MEM_5]] = phi i64 [ [[I86_REG2MEM_0]], [[BB20]] ], [ [[I86_REG2MEM_4]], [[BB93]] ]
; CHECK-NEXT:    fence syncscope("workgroup") seq_cst
; CHECK-NEXT:    tail call void @llvm.amdgcn.s.barrier() #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    [[I95]] = add nsw i32 [[I15]], [[I22]]
; CHECK-NEXT:    [[I96:%.*]] = add nsw i32 [[I15]], [[I21]]
; CHECK-NEXT:    [[I97]] = tail call i32 @llvm.smin.i32(i32 [[I96]], i32 [[I3]])
; CHECK-NEXT:    [[I98:%.*]] = icmp slt i32 [[I95]], [[I2]]
; CHECK-NEXT:    br i1 [[I98]], label [[BB20]], label [[BB99:%.*]], !llvm.loop [[LOOP192:![0-9]+]]
; CHECK:       bb99:
; CHECK-NEXT:    br label [[BB100]]
; CHECK:       bb100:
; CHECK-NEXT:    ret void
;
bb:
  %i = tail call i32 @llvm.amdgcn.workitem.id.x() #3, !range !157, !noundef !158
  %i2 = trunc i64 %arg1 to i32
  %i3 = add nsw i32 %i2, -1
  %i4 = icmp sgt i32 %i2, 0
  br i1 %i4, label %bb5, label %bb100

bb5:                                              ; preds = %bb
  %i6 = tail call i32 @llvm.amdgcn.workgroup.id.x() #4, !range !159
  %i7 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #5
  %i8 = getelementptr inbounds i8, ptr addrspace(4) %i7, i64 4
  %i9 = load i16, ptr addrspace(4) %i8, align 4
  %i10 = getelementptr inbounds i8, ptr addrspace(4) %i7, i64 12
  %i11 = load i32, ptr addrspace(4) %i10, align 4, !invariant.load !158
  %i12 = zext i16 %i9 to i32
  %i13 = udiv i32 %i11, %i12
  %i14 = shl nsw i32 %i6, 8
  %i15 = shl nsw i32 %i13, 8
  %i16 = icmp slt i32 %i14, %i2
  br i1 %i16, label %bb17, label %bb100

bb17:                                             ; preds = %bb5
  %i18 = or disjoint i32 %i14, 255
  %i19 = tail call i32 @llvm.smin.i32(i32 %i18, i32 %i3), !range !160
  br label %bb20

bb20:                                             ; preds = %bb94, %bb17
  %i21 = phi i32 [ %i19, %bb17 ], [ %i97, %bb94 ]
  %i22 = phi i32 [ %i14, %bb17 ], [ %i95, %bb94 ]
  %i23 = add nsw i32 %i22, %i
  %i24 = icmp sgt i32 %i23, %i21
  br i1 %i24, label %bb94, label %bb25

bb25:                                             ; preds = %bb20
  %i26 = load ptr, ptr addrspace(1) @_ZN6openmc10simulation16device_particlesE, align 8, !tbaa !161, !llvm.access.group !165
  br label %bb27

bb27:                                             ; preds = %bb90, %bb25
  %i28 = phi i32 [ %i23, %bb25 ], [ %i91, %bb90 ]
  %i29 = sext i32 %i28 to i64
  %i30 = add nsw i32 %i28, 1
  %i31 = sext i32 %i30 to i64
  %i32 = getelementptr inbounds %"class.openmc::Particle", ptr %i26, i64 %i29, i32 3
  store i64 %i31, ptr %i32, align 8, !tbaa !166, !llvm.access.group !165
  %i33 = getelementptr inbounds %"class.openmc::Particle", ptr %i26, i64 %i29, i32 39
  %i34 = mul nsw i64 %i31, 152917
  %i35 = and i64 %i34, 9223372036854775807
  %i36 = icmp eq i64 %i35, 0
  br label %bb37

bb37:                                             ; preds = %bb85, %bb27
  %i38 = phi i32 [ 0, %bb27 ], [ %i88, %bb85 ]
  %i39 = zext nneg i32 %i38 to i64
  br i1 %i36, label %bb60, label %bb40

bb40:                                             ; preds = %bb37
  br label %bb41

bb41:                                             ; preds = %bb51, %bb40
  %i42 = phi i64 [ %i52, %bb51 ], [ 0, %bb40 ]
  %i43 = phi i64 [ %i54, %bb51 ], [ 1, %bb40 ]
  %i44 = phi i64 [ %i55, %bb51 ], [ 2806196910506780709, %bb40 ]
  %i45 = phi i64 [ %i56, %bb51 ], [ %i35, %bb40 ]
  %i46 = and i64 %i45, 1
  %i47 = icmp eq i64 %i46, 0
  br i1 %i47, label %bb51, label %bb48

bb48:                                             ; preds = %bb41
  %i49 = mul i64 %i44, %i42
  %i50 = add i64 %i49, %i43
  br label %bb51

bb51:                                             ; preds = %bb48, %bb41
  %i52 = phi i64 [ %i50, %bb48 ], [ %i42, %bb41 ]
  %i53 = add i64 %i44, 1
  %i54 = mul i64 %i53, %i43
  %i55 = mul i64 %i44, %i44
  %i56 = lshr i64 %i45, 1
  %i57 = icmp ult i64 %i45, 2
  br i1 %i57, label %bb58, label %bb41, !llvm.loop !183

bb58:                                             ; preds = %bb51
  %i59 = phi i64 [ %i52, %bb51 ]
  br label %bb60

bb60:                                             ; preds = %bb58, %bb37
  %i61 = phi i64 [ 0, %bb37 ], [ %i59, %bb58 ]
  %i62 = getelementptr inbounds i64, ptr %i33, i64 %i39
  store i64 %i61, ptr %i62, align 8, !tbaa !186, !llvm.access.group !165
  %i63 = or disjoint i32 %i38, 1
  %i64 = zext nneg i32 %i63 to i64
  br i1 %i36, label %bb85, label %bb65

bb65:                                             ; preds = %bb60
  br label %bb66

bb66:                                             ; preds = %bb76, %bb65
  %i67 = phi i64 [ %i77, %bb76 ], [ 0, %bb65 ]
  %i68 = phi i64 [ %i79, %bb76 ], [ 1, %bb65 ]
  %i69 = phi i64 [ %i80, %bb76 ], [ 2806196910506780709, %bb65 ]
  %i70 = phi i64 [ %i81, %bb76 ], [ %i35, %bb65 ]
  %i71 = and i64 %i70, 1
  %i72 = icmp eq i64 %i71, 0
  br i1 %i72, label %bb76, label %bb73

bb73:                                             ; preds = %bb66
  %i74 = mul i64 %i69, %i67
  %i75 = add i64 %i74, %i68
  br label %bb76

bb76:                                             ; preds = %bb73, %bb66
  %i77 = phi i64 [ %i75, %bb73 ], [ %i67, %bb66 ]
  %i78 = add i64 %i69, 1
  %i79 = mul i64 %i78, %i68
  %i80 = mul i64 %i69, %i69
  %i81 = lshr i64 %i70, 1
  %i82 = icmp ult i64 %i70, 2
  br i1 %i82, label %bb83, label %bb66, !llvm.loop !187

bb83:                                             ; preds = %bb76
  %i84 = phi i64 [ %i77, %bb76 ]
  br label %bb85

bb85:                                             ; preds = %bb83, %bb60
  %i86 = phi i64 [ 0, %bb60 ], [ %i84, %bb83 ]
  %i87 = getelementptr inbounds i64, ptr %i33, i64 %i64
  store i64 %i86, ptr %i87, align 8, !tbaa !186, !llvm.access.group !165
  %i88 = add nuw nsw i32 %i38, 2
  %i89 = icmp eq i32 %i88, 8
  br i1 %i89, label %bb90, label %bb37, !llvm.loop !188

bb90:                                             ; preds = %bb85
  %i91 = add nsw i32 %i28, %i12
  %i92 = icmp sgt i32 %i91, %i21
  br i1 %i92, label %bb93, label %bb27, !llvm.loop !189

bb93:                                             ; preds = %bb90
  br label %bb94

bb94:                                             ; preds = %bb93, %bb20
  fence syncscope("workgroup") seq_cst
  tail call void @llvm.amdgcn.s.barrier() #6
  %i95 = add nsw i32 %i15, %i22
  %i96 = add nsw i32 %i15, %i21
  %i97 = tail call i32 @llvm.smin.i32(i32 %i96, i32 %i3)
  %i98 = icmp slt i32 %i95, %i2
  br i1 %i98, label %bb20, label %bb99, !llvm.loop !193

bb99:                                             ; preds = %bb94
  br label %bb100

bb100:                                            ; preds = %bb99, %bb5, %bb
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nofree nounwind willreturn }
attributes #2 = { alwaysinline norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "kernel" "no-trapping-math"="true" "omp_target_thread_limit"="256" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" "uniform-work-group-size"="true" }
attributes #3 = { "llvm.assume"="ompx_no_call_asm" }
attributes #4 = { nofree nosync willreturn "llvm.assume"="ompx_no_call_asm" }
attributes #5 = { nosync "llvm.assume"="ompx_no_call_asm" }
attributes #6 = { "llvm.assume"="ompx_no_call_asm,ompx_aligned_barrier" }

!llvm.ident = !{!0, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2, !1, !2}
!llvm.module.flags = !{!3, !4, !5, !6, !7, !8, !9, !10, !11, !12}
!opencl.ocl.version = !{!13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13, !13}
!omp_offload.info = !{!14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !26, !29, !27, !22, !30, !25, !26, !31, !32, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !33, !34, !35, !22, !36, !25, !26, !37, !38, !39, !27, !40, !41, !29, !26, !29, !27, !22, !30, !25, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !14, !16, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !14, !61, !16, !29, !19, !20, !21, !22, !23, !25, !24, !26, !62, !63, !64, !27, !65, !28, !66, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !14, !16, !19, !20, !21, !22, !23, !24, !25, !26, !67, !27, !28, !29, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !68, !27, !22, !30, !25, !42, !69, !70, !48, !46, !25, !26, !37, !71, !40, !72, !29, !33, !43, !73, !35, !44, !45, !22, !47, !38, !74, !75, !27, !49, !76, !41, !77, !26, !25, !29, !78, !27, !22, !30, !79, !80, !81, !82, !26, !29, !27, !22, !30, !25, !26, !37, !38, !33, !29, !35, !27, !40, !22, !41, !36, !25, !83, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !84, !48, !85, !86, !27, !40, !49, !87, !41, !29, !88, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !89, !90, !33, !91, !35, !22, !92, !36, !25, !26, !37, !38, !93, !27, !40, !41, !29, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !26, !29, !27, !22, !30, !25, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !14, !16, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !94, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !77, !14, !95, !96, !97, !21, !23, !25, !26, !98, !99, !100, !101, !102, !29, !16, !103, !19, !104, !20, !22, !24, !105, !106, !107, !27, !108, !28, !109, !110, !14, !16, !111, !112, !19, !113, !20, !21, !22, !23, !25, !47, !26, !114, !115, !116, !117, !27, !118, !28, !119, !120, !121, !29, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !26, !37, !38, !33, !29, !35, !27, !40, !22, !41, !36, !25, !26, !29, !122, !27, !22, !30, !25, !26, !37, !38, !33, !29, !35, !27, !40, !22, !41, !36, !25, !26, !123, !29, !25, !27, !22, !30, !124, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25, !125, !42, !48, !46, !25, !26, !37, !126, !127, !128, !40, !129, !29, !130, !33, !43, !131, !132, !35, !45, !44, !22, !47, !38, !133, !134, !27, !49, !41, !135, !136, !42, !33, !43, !35, !44, !45, !22, !46, !25, !47, !26, !37, !38, !48, !27, !40, !49, !41, !29, !14, !16, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !26, !137, !29, !27, !22, !30, !25, !14, !16, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !26, !29, !27, !22, !30, !25, !26, !37, !38, !33, !29, !35, !27, !40, !22, !41, !36, !25, !138, !37, !139, !33, !140, !35, !141, !40, !142, !41, !36, !143, !26, !29, !27, !22, !30, !25, !26, !29, !27, !22, !30, !25}
!nvvm.annotations = !{!144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156}

!0 = !{!"clang version 18.0.0git (git@github.com:ivanradanov/llvm-project2.git a0d01a2a64cf32877691f11f27ceedb63fdcb54d)"}
!1 = !{!"clang version 18.0.0git (git@github.com:ivanradanov/llvm-project2.git 9aa3edbb7c5a646f10e88e4d7144aa353f3fe434)"}
!2 = !{!"AMD clang version 17.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.7.0 23352 d1e13c532a947d0cbfc94759c00dcf152294aa13)"}
!3 = !{i32 7, !"Dwarf Version", i32 5}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"openmp", i32 51}
!7 = !{i32 7, !"openmp-device", i32 51}
!8 = !{i32 8, !"PIC Level", i32 2}
!9 = !{i32 1, !"ThinLTO", i32 0}
!10 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!11 = !{i32 1, !"amdgpu_code_object_version", i32 400}
!12 = !{i32 4, !"amdgpu_hostcall", i32 1}
!13 = !{i32 2, i32 0}
!14 = !{i32 1, !"keff", i32 0, i32 7}
!15 = !{i32 1, !"_ZN6openmc10simulation18device_source_bankE", i32 0, i32 13}
!16 = !{i32 1, !"need_depletion_rx", i32 0, i32 9}
!17 = !{i32 1, !"_ZN6openmc10simulation12fission_bankE", i32 0, i32 14}
!18 = !{i32 1, !"_ZN6openmc10simulation27device_progeny_per_particleE", i32 0, i32 15}
!19 = !{i32 1, !"current_gen", i32 0, i32 6}
!20 = !{i32 1, !"current_batch", i32 0, i32 5}
!21 = !{i32 1, !"total_gen", i32 0, i32 11}
!22 = !{i32 1, !"run_CE", i32 0, i32 1}
!23 = !{i32 1, !"depletion_scores_present", i32 0, i32 10}
!24 = !{i32 1, !"_ZN6openmcL12DEPLETION_RXE", i32 0, i32 12}
!25 = !{i32 1, !"gen_per_batch", i32 0, i32 3}
!26 = !{i32 1, !"dagmc", i32 0, i32 0}
!27 = !{i32 1, !"max_lost_particles", i32 0, i32 2}
!28 = !{i32 1, !"n_lost_particles", i32 0, i32 8}
!29 = !{i32 1, !"n_particles", i32 0, i32 4}
!30 = !{i32 1, !"_ZN6openmcL12DEPLETION_RXE", i32 0, i32 5}
!31 = !{i32 1, !"_ZN6openmc4data17device_ttb_e_gridE", i32 0, i32 6}
!32 = !{i32 1, !"_ZN6openmc4data15ttb_e_grid_sizeE", i32 0, i32 7}
!33 = !{i32 1, !"_ZN6openmc7Nuclide13XS_NU_FISSIONE", i32 0, i32 9}
!34 = !{i32 1, !"_ZN6openmc5model16device_universesE", i32 0, i32 13}
!35 = !{i32 1, !"_ZN6openmc7Nuclide14XS_PHOTON_PRODE", i32 0, i32 10}
!36 = !{i32 1, !"_ZN6openmcL12DEPLETION_RXE", i32 0, i32 11}
!37 = !{i32 1, !"_ZN6openmc7Nuclide8XS_TOTALE", i32 0, i32 6}
!38 = !{i32 1, !"_ZN6openmc17WindowedMultipole21MAX_POLY_COEFFICIENTSE", i32 0, i32 5}
!39 = !{i32 1, !"_ZN6openmc5model12device_cellsE", i32 0, i32 12}
!40 = !{i32 1, !"_ZN6openmc7Nuclide13XS_ABSORPTIONE", i32 0, i32 7}
!41 = !{i32 1, !"_ZN6openmc7Nuclide10XS_FISSIONE", i32 0, i32 8}
!42 = !{i32 1, !"keff", i32 0, i32 13}
!43 = !{i32 1, !"need_depletion_rx", i32 0, i32 15}
!44 = !{i32 1, !"current_gen", i32 0, i32 12}
!45 = !{i32 1, !"current_batch", i32 0, i32 11}
!46 = !{i32 1, !"depletion_scores_present", i32 0, i32 16}
!47 = !{i32 1, !"_ZN6openmcL12DEPLETION_RXE", i32 0, i32 18}
!48 = !{i32 1, !"total_gen", i32 0, i32 17}
!49 = !{i32 1, !"n_lost_particles", i32 0, i32 14}
!50 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc19process_init_eventsEi", i32 206, i32 0, i32 21}
!51 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc20process_death_eventsEi", i32 428, i32 0, i32 28}
!52 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc22process_revival_eventsEv", i32 455, i32 0, i32 29}
!53 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc24process_collision_eventsEv", i32 392, i32 0, i32 27}
!54 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc31process_advance_particle_eventsEv", i32 319, i32 0, i32 24}
!55 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc31process_advance_particle_eventsEv", i32 341, i32 0, i32 25}
!56 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc31process_surface_crossing_eventsEv", i32 363, i32 0, i32 26}
!57 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc32process_calculate_xs_events_fuelEv", i32 296, i32 0, i32 23}
!58 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc35process_calculate_xs_events_nonfuelEv", i32 259, i32 0, i32 22}
!59 = !{i32 0, i32 76, i32 9276139, !"_ZN6openmc9is_sortedERNS_11SharedArrayINS_14EventQueueItemEEE", i32 96, i32 0, i32 20}
!60 = !{i32 1, !"_ZN6openmc10simulation23calculate_fuel_xs_queueE", i32 0, i32 13}
!61 = !{i32 1, !"_ZN6openmc10simulation22surface_crossing_queueE", i32 0, i32 16}
!62 = !{i32 1, !"_ZN6openmc10simulation26calculate_nonfuel_xs_queueE", i32 0, i32 14}
!63 = !{i32 1, !"_ZN6openmc10simulation13revival_queueE", i32 0, i32 18}
!64 = !{i32 1, !"_ZN6openmc10simulation22advance_particle_queueE", i32 0, i32 15}
!65 = !{i32 1, !"_ZN6openmc10simulation21current_source_offsetE", i32 0, i32 19}
!66 = !{i32 1, !"_ZN6openmc10simulation15collision_queueE", i32 0, i32 17}
!67 = !{i32 1, !"_ZN6openmc5model13root_universeE", i32 0, i32 13}
!68 = !{i32 1, !"_ZN6openmc5model15device_latticesE", i32 0, i32 6}
!69 = !{i32 1, !"_ZN6openmc5model14materials_sizeE", i32 0, i32 20}
!70 = !{i32 1, !"_ZN6openmc5model12materials_p0E", i32 0, i32 24}
!71 = !{i32 1, !"_ZN6openmc5model27materials_mat_nuclide_indexE", i32 0, i32 25}
!72 = !{i32 1, !"_ZN6openmc5model9materialsE", i32 0, i32 19}
!73 = !{i32 1, !"_ZN6openmc5model24materials_thermal_tablesE", i32 0, i32 26}
!74 = !{i32 1, !"_ZN6openmc5model17materials_elementE", i32 0, i32 22}
!75 = !{i32 1, !"_ZN6openmc5model17materials_nuclideE", i32 0, i32 21}
!76 = !{i32 1, !"_ZN6openmc5model22materials_atom_densityE", i32 0, i32 23}
!77 = !{i32 1, !"_ZN6openmcL12DEPLETION_RXE", i32 0, i32 0}
!78 = !{i32 1, !"_ZN6openmc5model11meshes_sizeE", i32 0, i32 7}
!79 = !{i32 1, !"_ZN6openmc5model6meshesE", i32 0, i32 6}
!80 = !{i32 1, !"_ZN6openmc3mpi4rankE", i32 0, i32 0}
!81 = !{i32 1, !"_ZN6openmc3mpi6masterE", i32 0, i32 2}
!82 = !{i32 1, !"_ZN6openmc3mpi7n_procsE", i32 0, i32 1}
!83 = !{i32 0, i32 76, i32 42614384, !"_ZN6openmc7Nuclide14copy_to_deviceEv", i32 735, i32 0, i32 23}
!84 = !{i32 1, !"_ZN6openmc4data13nuclides_sizeE", i32 0, i32 22}
!85 = !{i32 1, !"_ZN6openmc4data10energy_minE", i32 0, i32 19}
!86 = !{i32 1, !"_ZN6openmc4data10energy_maxE", i32 0, i32 20}
!87 = !{i32 1, !"_ZN6openmc4data8nuclidesE", i32 0, i32 21}
!88 = !{i32 0, i32 76, i32 42615056, !"_ZN6openmc9is_deviceEv", i32 403, i32 0, i32 19}
!89 = !{i32 0, i32 76, i32 82922007, !"_ZN6openmc17PhotonInteraction14copy_to_deviceEv", i32 863, i32 0, i32 16}
!90 = !{i32 1, !"_ZN6openmc4data13elements_sizeE", i32 0, i32 15}
!91 = !{i32 1, !"_ZN6openmc4data8elementsE", i32 0, i32 14}
!92 = !{i32 1, !"_ZN6openmc4data23compton_profile_pz_sizeE", i32 0, i32 13}
!93 = !{i32 1, !"_ZN6openmc4data18compton_profile_pzE", i32 0, i32 12}
!94 = !{i32 1, !"_ZN6openmc11master_seedE", i32 0, i32 0}
!95 = !{i32 1, !"_ZN6openmc8settings14check_overlapsE", i32 0, i32 14}
!96 = !{i32 1, !"_ZN6openmc8settings14weight_surviveE", i32 0, i32 28}
!97 = !{i32 1, !"_ZN6openmc8settings10n_log_binsE", i32 0, i32 21}
!98 = !{i32 1, !"_ZN6openmc8settings23create_fission_neutronsE", i32 0, i32 15}
!99 = !{i32 1, !"_ZN6openmc8settings13weight_cutoffE", i32 0, i32 27}
!100 = !{i32 1, !"_ZN6openmc8settings19res_scat_energy_maxE", i32 0, i32 24}
!101 = !{i32 1, !"_ZN6openmc8settings13energy_cutoffE", i32 0, i32 20}
!102 = !{i32 1, !"_ZN6openmc8settings8run_modeE", i32 0, i32 25}
!103 = !{i32 1, !"_ZN6openmc8settings18temperature_methodE", i32 0, i32 26}
!104 = !{i32 1, !"_ZN6openmc8settings15assume_separateE", i32 0, i32 13}
!105 = !{i32 1, !"_ZN6openmc8settings18electron_treatmentE", i32 0, i32 19}
!106 = !{i32 1, !"_ZN6openmc8settings14urr_ptables_onE", i32 0, i32 17}
!107 = !{i32 1, !"_ZN6openmc8settings15res_scat_methodE", i32 0, i32 22}
!108 = !{i32 1, !"_ZN6openmc8settings22rel_max_lost_particlesE", i32 0, i32 18}
!109 = !{i32 1, !"_ZN6openmc8settings19res_scat_energy_minE", i32 0, i32 23}
!110 = !{i32 1, !"_ZN6openmc8settings16survival_biasingE", i32 0, i32 16}
!111 = !{i32 1, !"_ZN6openmc7Nuclide13XS_NU_FISSIONE", i32 0, i32 16}
!112 = !{i32 1, !"_ZN6openmc10simulation11log_spacingE", i32 0, i32 19}
!113 = !{i32 1, !"_ZN6openmc7Nuclide14XS_PHOTON_PRODE", i32 0, i32 17}
!114 = !{i32 1, !"_ZN6openmc7Nuclide8XS_TOTALE", i32 0, i32 13}
!115 = !{i32 1, !"_ZN6openmc17WindowedMultipole21MAX_POLY_COEFFICIENTSE", i32 0, i32 12}
!116 = !{i32 1, !"_ZN6openmc10simulation12total_weightE", i32 0, i32 20}
!117 = !{i32 1, !"_ZN6openmc10simulation13work_per_rankE", i32 0, i32 21}
!118 = !{i32 1, !"_ZN6openmc7Nuclide13XS_ABSORPTIONE", i32 0, i32 14}
!119 = !{i32 1, !"_ZN6openmc10simulation17device_work_indexE", i32 0, i32 22}
!120 = !{i32 1, !"_ZN6openmc7Nuclide10XS_FISSIONE", i32 0, i32 15}
!121 = !{i32 1, !"_ZN6openmc10simulation16device_particlesE", i32 0, i32 23}
!122 = !{i32 1, !"_ZN6openmc5model15device_surfacesE", i32 0, i32 6}
!123 = !{i32 1, !"_ZN6openmc5model13tally_filtersE", i32 0, i32 6}
!124 = !{i32 1, !"_ZN6openmc5model15n_tally_filtersE", i32 0, i32 7}
!125 = !{i32 1, !"_ZN6openmc23global_tally_absorptionE", i32 0, i32 27}
!126 = !{i32 1, !"_ZN6openmc5model12tallies_sizeE", i32 0, i32 20}
!127 = !{i32 1, !"_ZN6openmc5model21device_active_talliesE", i32 0, i32 21}
!128 = !{i32 1, !"_ZN6openmc24global_tally_tracklengthE", i32 0, i32 29}
!129 = !{i32 1, !"_ZN6openmc20global_tally_leakageE", i32 0, i32 30}
!130 = !{i32 1, !"_ZN6openmc5model33device_active_tracklength_talliesE", i32 0, i32 25}
!131 = !{i32 1, !"_ZN6openmc5model31active_tracklength_tallies_sizeE", i32 0, i32 26}
!132 = !{i32 1, !"_ZN6openmc5model31device_active_collision_talliesE", i32 0, i32 23}
!133 = !{i32 1, !"_ZN6openmc5model7talliesE", i32 0, i32 19}
!134 = !{i32 1, !"_ZN6openmc5model29active_collision_tallies_sizeE", i32 0, i32 24}
!135 = !{i32 1, !"_ZN6openmc5model19active_tallies_sizeE", i32 0, i32 22}
!136 = !{i32 1, !"_ZN6openmc22global_tally_collisionE", i32 0, i32 28}
!137 = !{i32 1, !"_ZN6openmc4data20device_thermal_scattE", i32 0, i32 6}
!138 = !{i32 1, !"dagmc", i32 0, i32 1}
!139 = !{i32 1, !"_ZN6openmc17WindowedMultipole21MAX_POLY_COEFFICIENTSE", i32 0, i32 0}
!140 = !{i32 1, !"n_particles", i32 0, i32 5}
!141 = !{i32 1, !"max_lost_particles", i32 0, i32 3}
!142 = !{i32 1, !"run_CE", i32 0, i32 2}
!143 = !{i32 1, !"gen_per_batch", i32 0, i32 4}
!144 = distinct !{null, !"kernel", i32 1}
!145 = !{ptr @__omp_offloading_4c_8d8aeb__ZN6openmc19process_init_eventsEi_l206, !"kernel", i32 1}
!146 = distinct !{null, !"kernel", i32 1}
!147 = distinct !{null, !"kernel", i32 1}
!148 = distinct !{null, !"kernel", i32 1}
!149 = distinct !{null, !"kernel", i32 1}
!150 = distinct !{null, !"kernel", i32 1}
!151 = distinct !{null, !"kernel", i32 1}
!152 = distinct !{null, !"kernel", i32 1}
!153 = distinct !{null, !"kernel", i32 1}
!154 = distinct !{null, !"kernel", i32 1}
!155 = distinct !{null, !"kernel", i32 1}
!156 = distinct !{null, !"kernel", i32 1}
!157 = !{i32 0, i32 1024}
!158 = !{}
!159 = !{i32 0, i32 -1}
!160 = !{i32 -2147483648, i32 2147483647}
!161 = !{!162, !162, i64 0}
!162 = !{!"any pointer", !163, i64 0}
!163 = !{!"omnipotent char", !164, i64 0}
!164 = !{!"Simple C++ TBAA"}
!165 = distinct !{}
!166 = !{!167, !171, i64 864}
!167 = !{!"_ZTSN6openmc8ParticleE", !168, i64 0, !163, i64 168, !169, i64 744, !171, i64 864, !172, i64 872, !173, i64 876, !173, i64 880, !163, i64 888, !173, i64 1368, !163, i64 1372, !170, i64 1400, !170, i64 1408, !173, i64 1416, !173, i64 1420, !170, i64 1424, !170, i64 1432, !174, i64 1440, !174, i64 1464, !174, i64 1488, !170, i64 1512, !175, i64 1520, !176, i64 1524, !173, i64 1528, !173, i64 1532, !173, i64 1536, !173, i64 1540, !173, i64 1544, !170, i64 1552, !163, i64 1560, !173, i64 1592, !173, i64 1596, !173, i64 1600, !173, i64 1604, !177, i64 1608, !170, i64 1640, !170, i64 1648, !173, i64 1656, !175, i64 1660, !163, i64 1664, !173, i64 1728, !163, i64 1736, !171, i64 2216, !171, i64 2224, !163, i64 2232, !162, i64 2240, !179, i64 2248, !163, i64 2272, !170, i64 2656, !170, i64 2664, !170, i64 2672, !170, i64 2680, !175, i64 2688, !170, i64 2696, !170, i64 2704, !173, i64 2712, !171, i64 2720}
!168 = !{!"_ZTSN6openmc19NuclideMicroXSCacheE", !163, i64 0}
!169 = !{!"_ZTSN6openmc7MacroXSE", !170, i64 0, !170, i64 8, !170, i64 16, !170, i64 24, !170, i64 32, !163, i64 40, !170, i64 88, !170, i64 96, !170, i64 104, !170, i64 112}
!170 = !{!"double", !163, i64 0}
!171 = !{!"long", !163, i64 0}
!172 = !{!"_ZTSN6openmc8Particle4TypeE", !163, i64 0}
!173 = !{!"int", !163, i64 0}
!174 = !{!"_ZTSN6openmc8PositionE", !170, i64 0, !170, i64 8, !170, i64 16}
!175 = !{!"bool", !163, i64 0}
!176 = !{!"_ZTSN6openmc10TallyEventE", !163, i64 0}
!177 = !{!"_ZTSN6openmc12BoundaryInfoE", !170, i64 0, !173, i64 8, !173, i64 12, !178, i64 16}
!178 = !{!"_ZTSSt5arrayIiLm3EE", !163, i64 0}
!179 = !{!"_ZTSSt6vectorIS_IN6openmc8PositionESaIS1_EESaIS3_EE", !180, i64 0}
!180 = !{!"_ZTSSt12_Vector_baseISt6vectorIN6openmc8PositionESaIS2_EESaIS4_EE", !181, i64 0}
!181 = !{!"_ZTSNSt12_Vector_baseISt6vectorIN6openmc8PositionESaIS2_EESaIS4_EE12_Vector_implE", !182, i64 0}
!182 = !{!"_ZTSNSt12_Vector_baseISt6vectorIN6openmc8PositionESaIS2_EESaIS4_EE17_Vector_impl_dataE", !162, i64 0, !162, i64 8, !162, i64 16}
!183 = distinct !{!183, !184, !185}
!184 = !{!"llvm.loop.mustprogress"}
!185 = !{!"llvm.loop.unroll_and_interleave.disable"}
!186 = !{!171, !171, i64 0}
!187 = distinct !{!187, !184, !185}
!188 = distinct !{!188, !184, !185}
!189 = distinct !{!189, !190, !191, !192}
!190 = !{!"llvm.loop.parallel_accesses", !165}
!191 = !{!"llvm.loop.unroll_and_interleave.count", i32 2}
!192 = !{!"llvm.loop.unroll_and_interleave.level", i32 0}
!193 = distinct !{!193, !185}
;.
; CHECK: [[RNG157]] = !{i32 0, i32 1024}
; CHECK: [[META158]] = !{}
; CHECK: [[RNG159]] = !{i32 0, i32 -1}
; CHECK: [[RNG160]] = !{i32 -2147483648, i32 2147483647}
; CHECK: [[TBAA161]] = !{[[META162:![0-9]+]], [[META162]], i64 0}
; CHECK: [[META162]] = !{!"any pointer", [[META163:![0-9]+]], i64 0}
; CHECK: [[META163]] = !{!"omnipotent char", [[META164:![0-9]+]], i64 0}
; CHECK: [[META164]] = !{!"Simple C++ TBAA"}
; CHECK: [[ACC_GRP165]] = distinct !{}
; CHECK: [[TBAA166]] = !{[[META167:![0-9]+]], [[META171:![0-9]+]], i64 864}
; CHECK: [[META167]] = !{!"_ZTSN6openmc8ParticleE", [[META168:![0-9]+]], i64 0, [[META163]], i64 168, [[META169:![0-9]+]], i64 744, [[META171]], i64 864, [[META172:![0-9]+]], i64 872, [[META173:![0-9]+]], i64 876, [[META173]], i64 880, [[META163]], i64 888, [[META173]], i64 1368, [[META163]], i64 1372, [[META170:![0-9]+]], i64 1400, [[META170]], i64 1408, [[META173]], i64 1416, [[META173]], i64 1420, [[META170]], i64 1424, [[META170]], i64 1432, [[META174:![0-9]+]], i64 1440, [[META174]], i64 1464, [[META174]], i64 1488, [[META170]], i64 1512, [[META175:![0-9]+]], i64 1520, [[META176:![0-9]+]], i64 1524, [[META173]], i64 1528, [[META173]], i64 1532, [[META173]], i64 1536, [[META173]], i64 1540, [[META173]], i64 1544, [[META170]], i64 1552, [[META163]], i64 1560, [[META173]], i64 1592, [[META173]], i64 1596, [[META173]], i64 1600, [[META173]], i64 1604, [[META177:![0-9]+]], i64 1608, [[META170]], i64 1640, [[META170]], i64 1648, [[META173]], i64 1656, [[META175]], i64 1660, [[META163]], i64 1664, [[META173]], i64 1728, [[META163]], i64 1736, [[META171]], i64 2216, [[META171]], i64 2224, [[META163]], i64 2232, [[META162]], i64 2240, [[META179:![0-9]+]], i64 2248, [[META163]], i64 2272, [[META170]], i64 2656, [[META170]], i64 2664, [[META170]], i64 2672, [[META170]], i64 2680, [[META175]], i64 2688, [[META170]], i64 2696, [[META170]], i64 2704, [[META173]], i64 2712, [[META171]], i64 2720}
; CHECK: [[META168]] = !{!"_ZTSN6openmc19NuclideMicroXSCacheE", [[META163]], i64 0}
; CHECK: [[META169]] = !{!"_ZTSN6openmc7MacroXSE", [[META170]], i64 0, [[META170]], i64 8, [[META170]], i64 16, [[META170]], i64 24, [[META170]], i64 32, [[META163]], i64 40, [[META170]], i64 88, [[META170]], i64 96, [[META170]], i64 104, [[META170]], i64 112}
; CHECK: [[META170]] = !{!"double", [[META163]], i64 0}
; CHECK: [[META171]] = !{!"long", [[META163]], i64 0}
; CHECK: [[META172]] = !{!"_ZTSN6openmc8Particle4TypeE", [[META163]], i64 0}
; CHECK: [[META173]] = !{!"int", [[META163]], i64 0}
; CHECK: [[META174]] = !{!"_ZTSN6openmc8PositionE", [[META170]], i64 0, [[META170]], i64 8, [[META170]], i64 16}
; CHECK: [[META175]] = !{!"bool", [[META163]], i64 0}
; CHECK: [[META176]] = !{!"_ZTSN6openmc10TallyEventE", [[META163]], i64 0}
; CHECK: [[META177]] = !{!"_ZTSN6openmc12BoundaryInfoE", [[META170]], i64 0, [[META173]], i64 8, [[META173]], i64 12, [[META178:![0-9]+]], i64 16}
; CHECK: [[META178]] = !{!"_ZTSSt5arrayIiLm3EE", [[META163]], i64 0}
; CHECK: [[META179]] = !{!"_ZTSSt6vectorIS_IN6openmc8PositionESaIS1_EESaIS3_EE", [[META180:![0-9]+]], i64 0}
; CHECK: [[META180]] = !{!"_ZTSSt12_Vector_baseISt6vectorIN6openmc8PositionESaIS2_EESaIS4_EE", [[META181:![0-9]+]], i64 0}
; CHECK: [[META181]] = !{!"_ZTSNSt12_Vector_baseISt6vectorIN6openmc8PositionESaIS2_EESaIS4_EE12_Vector_implE", [[META182:![0-9]+]], i64 0}
; CHECK: [[META182]] = !{!"_ZTSNSt12_Vector_baseISt6vectorIN6openmc8PositionESaIS2_EESaIS4_EE17_Vector_impl_dataE", [[META162]], i64 0, [[META162]], i64 8, [[META162]], i64 16}
; CHECK: [[TBAA183]] = !{[[META171]], [[META171]], i64 0}
; CHECK: [[LOOP184]] = distinct !{[[LOOP184]], [[META185:![0-9]+]], [[META186:![0-9]+]]}
; CHECK: [[META185]] = !{!"llvm.loop.mustprogress"}
; CHECK: [[META186]] = !{!"llvm.loop.unroll_and_interleave.disable"}
; CHECK: [[LOOP187]] = distinct !{[[LOOP187]], [[META185]], [[META186]]}
; CHECK: [[LOOP188]] = distinct !{[[LOOP188]], [[META189:![0-9]+]], [[META186]]}
; CHECK: [[META189]] = !{!"llvm.loop.parallel_accesses", [[ACC_GRP165]]}
; CHECK: [[LOOP190]] = distinct !{[[LOOP190]], [[META185]], [[META186]]}
; CHECK: [[LOOP191]] = distinct !{[[LOOP191]], [[META189]], [[META186]]}
; CHECK: [[LOOP192]] = distinct !{[[LOOP192]], [[META186]]}
;.
