; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=loop-unroll-and-interleave %s -S --luai-factor=2 | FileCheck %s

; void vecadd(int *a, int size) {
; #pragma omp target teams distribute parallel for map(tofrom: a[0:size]) //schedule(static, 4)
;   for (unsigned long i = 0; i < size; i++) {
;     if (div) {
;        ...
;     } else {
;        ...
;     }
;     if (div) {
;        ...
;     } else {
;        ...
;     }
;
;   }
; }

%struct.ident_t = type { i32, i32, i32, i32, ptr }
%struct.DynamicEnvironmentTy = type { i16 }
%struct.KernelEnvironmentTy = type { %struct.ConfigurationEnvironmentTy, ptr, ptr }
%struct.ConfigurationEnvironmentTy = type { i8, i8, i8 }

@__omp_rtl_debug_kind = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_teams_oversubscription = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_threads_oversubscription = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_no_thread_state = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_no_nested_parallelism = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@anon.6daeacfa6de4527f9402700e18e2e17c.0 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@anon.6daeacfa6de4527f9402700e18e2e17c.1 = private unnamed_addr addrspace(1) constant %struct.ident_t { i32 0, i32 2, i32 0, i32 22, ptr @anon.6daeacfa6de4527f9402700e18e2e17c.0 }, align 8
@__omp_offloading_4e_5cb4cb97__Z6vecaddPiS_i_l14_dynamic_environment = weak_odr protected addrspace(1) global %struct.DynamicEnvironmentTy zeroinitializer
@__omp_offloading_4e_5cb4cb97__Z6vecaddPiS_i_l14_kernel_environment = weak_odr protected addrspace(1) constant %struct.KernelEnvironmentTy { %struct.ConfigurationEnvironmentTy { i8 0, i8 1, i8 2 }, ptr addrspacecast (ptr addrspace(1) @anon.6daeacfa6de4527f9402700e18e2e17c.1 to ptr), ptr addrspacecast (ptr addrspace(1) @__omp_offloading_4e_5cb4cb97__Z6vecaddPiS_i_l14_dynamic_environment to ptr) }
@anon.6daeacfa6de4527f9402700e18e2e17c.2 = private unnamed_addr addrspace(1) constant %struct.ident_t { i32 0, i32 2050, i32 0, i32 22, ptr @anon.6daeacfa6de4527f9402700e18e2e17c.0 }, align 8
@anon.6daeacfa6de4527f9402700e18e2e17c.3 = private unnamed_addr addrspace(1) constant %struct.ident_t { i32 0, i32 514, i32 0, i32 22, ptr @anon.6daeacfa6de4527f9402700e18e2e17c.0 }, align 8
@llvm.amdgcn.abi.version = weak_odr hidden local_unnamed_addr addrspace(4) constant i32 400

declare i32 @__kmpc_target_init(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p5(i64 immarg, ptr addrspace(5) nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p5(i64 immarg, ptr addrspace(5) nocapture) #1

; Function Attrs: nounwind
declare void @__kmpc_distribute_static_init_8u(ptr, i32, i32, ptr, ptr, ptr, ptr, i64, i64) local_unnamed_addr #2

; Function Attrs: alwaysinline convergent norecurse nounwind
define internal void @__omp_offloading_4e_5cb4cb97__Z6vecaddPiS_i_l14_omp_outlined_omp_outlined(ptr noalias nocapture noundef readonly %.global_tid., ptr noalias nocapture readnone %.bound_tid., i64 noundef %.previous.lb., i64 noundef %.previous.ub., i64 noundef %size, ptr noundef %a) #3 {
; CHECK-LABEL: define internal void @__omp_offloading_4e_5cb4cb97__Z6vecaddPiS_i_l14_omp_outlined_omp_outlined(
; CHECK-SAME: ptr noalias nocapture noundef readonly [[DOTGLOBAL_TID_:%.*]], ptr noalias nocapture readnone [[DOTBOUND_TID_:%.*]], i64 noundef [[DOTPREVIOUS_LB_:%.*]], i64 noundef [[DOTPREVIOUS_UB_:%.*]], i64 noundef [[SIZE:%.*]], ptr noundef [[A:%.*]]) #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTOMP_LB:%.*]] = alloca i64, align 8, addrspace(5)
; CHECK-NEXT:    [[DOTOMP_UB:%.*]] = alloca i64, align 8, addrspace(5)
; CHECK-NEXT:    [[DOTOMP_STRIDE:%.*]] = alloca i64, align 8, addrspace(5)
; CHECK-NEXT:    [[DOTOMP_IS_LAST:%.*]] = alloca i32, align 4, addrspace(5)
; CHECK-NEXT:    [[SEXT_MASK:%.*]] = and i64 [[SIZE]], 4294967295
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[SEXT_MASK]], 0
; CHECK-NEXT:    br i1 [[CMP_NOT]], label [[OMP_PRECOND_END:%.*]], label [[OMP_PRECOND_THEN:%.*]]
; CHECK:       omp.precond.then:
; CHECK-NEXT:    [[DOTOMP_STRIDE_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_STRIDE]] to ptr
; CHECK-NEXT:    [[DOTOMP_IS_LAST_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_IS_LAST]] to ptr
; CHECK-NEXT:    [[DOTOMP_UB_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_UB]] to ptr
; CHECK-NEXT:    [[DOTOMP_LB_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_LB]] to ptr
; CHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) [[DOTOMP_LB]]) #[[ATTR1:[0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) [[DOTOMP_UB]]) #[[ATTR1]]
; CHECK-NEXT:    store i64 [[DOTPREVIOUS_LB_]], ptr addrspace(5) [[DOTOMP_LB]], align 8, !tbaa [[TBAA12:![0-9]+]]
; CHECK-NEXT:    store i64 [[DOTPREVIOUS_UB_]], ptr addrspace(5) [[DOTOMP_UB]], align 8, !tbaa [[TBAA12]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) [[DOTOMP_STRIDE]]) #[[ATTR1]]
; CHECK-NEXT:    store i64 1, ptr addrspace(5) [[DOTOMP_STRIDE]], align 8, !tbaa [[TBAA12]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 4, ptr addrspace(5) [[DOTOMP_IS_LAST]]) #[[ATTR1]]
; CHECK-NEXT:    store i32 0, ptr addrspace(5) [[DOTOMP_IS_LAST]], align 4, !tbaa [[TBAA16:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[DOTGLOBAL_TID_]], align 4, !tbaa [[TBAA16]]
; CHECK-NEXT:    call void @__kmpc_for_static_init_8u(ptr addrspacecast (ptr addrspace(1) @anon.6daeacfa6de4527f9402700e18e2e17c.3 to ptr), i32 [[TMP0]], i32 33, ptr nonnull [[DOTOMP_IS_LAST_ASCAST]], ptr nonnull [[DOTOMP_LB_ASCAST]], ptr nonnull [[DOTOMP_UB_ASCAST]], ptr nonnull [[DOTOMP_STRIDE_ASCAST]], i64 1, i64 1) #[[ATTR1]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr addrspace(5) [[DOTOMP_LB]], align 8, !tbaa [[TBAA12]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr addrspace(5) [[DOTOMP_STRIDE]], align 8, !tbaa [[TBAA12]]
; CHECK-NEXT:    [[COARSENED_STEP:%.*]] = mul i64 [[TMP2]], 2
; CHECK-NEXT:    [[ADD:%.*]] = add i64 [[DOTPREVIOUS_UB_]], 1
; CHECK-NEXT:    [[CMP422:%.*]] = icmp ult i64 [[TMP1]], [[ADD]]
; CHECK-NEXT:    br i1 [[CMP422]], label [[OMP_INNER_FOR_BODY_PREHEADER:%.*]], label [[OMP_LOOP_EXIT:%.*]]
; CHECK:       omp.inner.for.body.preheader:
; CHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 1
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_1:%.*]] = add i64 [[TMP1]], [[TMP3]]
; CHECK-NEXT:    [[TMP4:%.*]] = sub i64 [[ADD]], [[TMP1]]
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], [[TMP2]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i64 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = udiv i64 [[TMP6]], [[TMP2]]
; CHECK-NEXT:    [[TMP8:%.*]] = udiv i64 [[TMP7]], 2
; CHECK-NEXT:    [[TMP9:%.*]] = mul nsw i64 [[TMP8]], 2
; CHECK-NEXT:    [[TMP10:%.*]] = mul nsw i64 [[TMP9]], [[TMP2]]
; CHECK-NEXT:    [[EPILOGUE_START_IV:%.*]] = add i64 [[TMP10]], [[TMP1]]
; CHECK-NEXT:    [[IS_EPILOGUE_START:%.*]] = icmp eq i64 [[TMP1]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    br i1 [[IS_EPILOGUE_START]], label [[OMP_INNER_FOR_BODY_EPILOGUE:%.*]], label [[OMP_INNER_FOR_BODY:%.*]]
; CHECK:       omp.inner.for.body:
; CHECK-NEXT:    [[DOTOMP_IV_023:%.*]] = phi i64 [ [[ADD12:%.*]], [[OMP_INNER_FOR_INC:%.*]] ], [ [[TMP1]], [[OMP_INNER_FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[DOTOMP_IV_023_COARSENED_1:%.*]] = phi i64 [ [[ADD12_COARSENED_1:%.*]], [[OMP_INNER_FOR_INC]] ], [ [[INITIAL_IV_COARSENED_1]], [[OMP_INNER_FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[CONV6:%.*]] = trunc i64 [[DOTOMP_IV_023]] to i32
; CHECK-NEXT:    [[CONV6_COARSENED_1:%.*]] = trunc i64 [[DOTOMP_IV_023_COARSENED_1]] to i32
; CHECK-NEXT:    [[CALL:%.*]] = call noundef zeroext i1 @_Z5test1i(i32 noundef [[CONV6]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    [[CALL_COARSENED_1:%.*]] = call noundef zeroext i1 @_Z5test1i(i32 noundef [[CONV6_COARSENED_1]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_0_INTRO_0:%.*]]
; CHECK:       if.end:
; CHECK-NEXT:    [[CALL8:%.*]] = call noundef zeroext i1 @_Z5test2i(i32 noundef [[CONV6]]) #[[ATTR6]]
; CHECK-NEXT:    [[CALL8_COARSENED_1:%.*]] = call noundef zeroext i1 @_Z5test2i(i32 noundef [[CONV6_COARSENED_1]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_END_DIVERGENT_ENTRY_DRS_1_INTRO_0:%.*]]
; CHECK:       omp.inner.for.incepilogue.start.check.original.end.check:
; CHECK-NEXT:    [[ADD12]] = add i64 [[COARSENED_STEP]], [[DOTOMP_IV_023]]
; CHECK-NEXT:    [[ADD12_COARSENED_1]] = add i64 [[COARSENED_STEP]], [[DOTOMP_IV_023_COARSENED_1]]
; CHECK-NEXT:    [[CMP4:%.*]] = icmp ult i64 [[ADD12]], [[ADD]]
; CHECK-NEXT:    [[CMP4_COARSENED_1:%.*]] = icmp ult i64 [[ADD12_COARSENED_1]], [[ADD]]
; CHECK-NEXT:    [[IS_EPILOGUE_START3:%.*]] = icmp eq i64 [[ADD12]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    br i1 [[CMP4]], label [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK:%.*]], label [[OMP_LOOP_EXIT_LOOPEXIT:%.*]]
; CHECK:       omp.inner.for.incepilogue.start.check:
; CHECK-NEXT:    br i1 [[IS_EPILOGUE_START3]], label [[OMP_INNER_FOR_BODY_EPILOGUE]], label [[OMP_INNER_FOR_INC]]
; CHECK:       omp.inner.for.inc:
; CHECK-NEXT:    br i1 [[CMP4]], label [[OMP_INNER_FOR_BODY]], label [[OMP_LOOP_EXIT_LOOPEXIT]], !llvm.loop [[LOOP18:![0-9]+]]
; CHECK:       if.else.drs.0:
; CHECK-NEXT:    call void @_Z4use2Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_END_DIVERGENT_EXIT_DRS_0:%.*]]
; CHECK:       if.then.drs.0:
; CHECK-NEXT:    call void @_Z4use1Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_END_DIVERGENT_EXIT_DRS_0]]
; CHECK:       if.end.divergent.exit.drs.0:
; CHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT_0:%.*]], label [[IF_END_DIVERGENT_EXIT_DRS_0_OUTRO_0:%.*]] [
; CHECK-NEXT:    i32 1, label [[IF_END_DIVERGENT_EXIT_DRS_0_OUTRO_1:%.*]]
; CHECK-NEXT:    ]
; CHECK:       if.end.divergent.exit.drs.0.outro.0:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_0_INTRO_1:%.*]]
; CHECK:       if.end.divergent.exit.drs.0.outro.1:
; CHECK-NEXT:    br label [[IF_END:%.*]]
; CHECK:       omp.inner.for.body.divergent.entry.drs.0.intro.0:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_0:%.*]]
; CHECK:       omp.inner.for.body.divergent.entry.drs.0.intro.1:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_0]]
; CHECK:       omp.inner.for.body.divergent.entry.drs.0:
; CHECK-NEXT:    [[DR_COARSENED_IDENT_0]] = phi i32 [ 0, [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ 1, [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ]
; CHECK-NEXT:    [[CALL_DRS_0_REG2MEM_0:%.*]] = phi i1 [ [[CALL]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[CALL_COARSENED_1]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ]
; CHECK-NEXT:    br i1 [[CALL_DRS_0_REG2MEM_0]], label [[IF_THEN_DRS_0:%.*]], label [[IF_ELSE_DRS_0:%.*]]
; CHECK:       if.end.divergent.entry.drs.1.intro.0:
; CHECK-NEXT:    br label [[IF_END_DIVERGENT_ENTRY_DRS_1:%.*]]
; CHECK:       if.end.divergent.entry.drs.1.intro.1:
; CHECK-NEXT:    br label [[IF_END_DIVERGENT_ENTRY_DRS_1]]
; CHECK:       if.end.divergent.entry.drs.1:
; CHECK-NEXT:    [[DR_COARSENED_IDENT1_0:%.*]] = phi i32 [ 0, [[IF_END_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ 1, [[IF_END_DIVERGENT_ENTRY_DRS_1_INTRO_1:%.*]] ]
; CHECK-NEXT:    [[CALL8_DRS_1_REG2MEM_0:%.*]] = phi i1 [ [[CALL8]], [[IF_END_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ [[CALL8_COARSENED_1]], [[IF_END_DIVERGENT_ENTRY_DRS_1_INTRO_1]] ]
; CHECK-NEXT:    br i1 [[CALL8_DRS_1_REG2MEM_0]], label [[IF_THEN9_DRS_1:%.*]], label [[IF_ELSE10_DRS_1:%.*]]
; CHECK:       if.else10.drs.1:
; CHECK-NEXT:    call void @_Z4use4Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_1:%.*]]
; CHECK:       if.then9.drs.1:
; CHECK-NEXT:    call void @_Z4use3Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_1]]
; CHECK:       omp.inner.for.inc.divergent.exit.drs.1.outro.0:
; CHECK-NEXT:    br label [[IF_END_DIVERGENT_ENTRY_DRS_1_INTRO_1]]
; CHECK:       omp.inner.for.inc.divergent.exit.drs.1.outro.1:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK_ORIGINAL_END_CHECK:%.*]]
; CHECK:       omp.inner.for.inc.divergent.exit.drs.1:
; CHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT1_0]], label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_1_OUTRO_0:%.*]] [
; CHECK-NEXT:    i32 1, label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_1_OUTRO_1:%.*]]
; CHECK-NEXT:    ]
; CHECK:       omp.inner.for.body.epilogue:
; CHECK-NEXT:    [[DOTOMP_IV_023_EPILOGUE:%.*]] = phi i64 [ [[ADD12_EPILOGUE:%.*]], [[OMP_INNER_FOR_INC_EPILOGUE:%.*]] ], [ [[ADD12]], [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK]] ], [ [[TMP1]], [[OMP_INNER_FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[CONV6_EPILOGUE:%.*]] = trunc i64 [[DOTOMP_IV_023_EPILOGUE]] to i32
; CHECK-NEXT:    [[CALL_EPILOGUE:%.*]] = call noundef zeroext i1 @_Z5test1i(i32 noundef [[CONV6_EPILOGUE]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_EPILOGUE:%.*]]
; CHECK:       if.else.epilogue:
; CHECK-NEXT:    call void @_Z4use2Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_END_DIVERGENT_EXIT_EPILOGUE:%.*]]
; CHECK:       if.then.epilogue:
; CHECK-NEXT:    call void @_Z4use1Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_END_DIVERGENT_EXIT_EPILOGUE]]
; CHECK:       if.end.divergent.entry.epilogue:
; CHECK-NEXT:    br i1 [[CALL8_EPILOGUE:%.*]], label [[IF_THEN9_EPILOGUE:%.*]], label [[IF_ELSE10_EPILOGUE:%.*]]
; CHECK:       if.else10.epilogue:
; CHECK-NEXT:    call void @_Z4use4Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_EPILOGUE:%.*]]
; CHECK:       if.then9.epilogue:
; CHECK-NEXT:    call void @_Z4use3Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_EPILOGUE]]
; CHECK:       omp.inner.for.inc.epilogue:
; CHECK-NEXT:    [[ADD12_EPILOGUE]] = add i64 [[TMP2]], [[DOTOMP_IV_023_EPILOGUE]]
; CHECK-NEXT:    [[CMP4_EPILOGUE:%.*]] = icmp ult i64 [[ADD12_EPILOGUE]], [[ADD]]
; CHECK-NEXT:    br i1 [[CMP4_EPILOGUE]], label [[OMP_INNER_FOR_BODY_EPILOGUE]], label [[OMP_LOOP_EXIT_LOOPEXIT]]
; CHECK:       if.end.divergent.exit.epilogue:
; CHECK-NEXT:    br label [[IF_END_EPILOGUE:%.*]]
; CHECK:       if.end.epilogue:
; CHECK-NEXT:    [[CALL8_EPILOGUE]] = call noundef zeroext i1 @_Z5test2i(i32 noundef [[CONV6_EPILOGUE]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_END_DIVERGENT_ENTRY_EPILOGUE:%.*]]
; CHECK:       omp.inner.for.body.divergent.entry.epilogue:
; CHECK-NEXT:    br i1 [[CALL_EPILOGUE]], label [[IF_THEN_EPILOGUE:%.*]], label [[IF_ELSE_EPILOGUE:%.*]]
; CHECK:       omp.inner.for.inc.divergent.exit.epilogue:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_EPILOGUE]]
; CHECK:       omp.loop.exit.loopexit:
; CHECK-NEXT:    br label [[OMP_LOOP_EXIT]]
; CHECK:       omp.loop.exit:
; CHECK-NEXT:    call void @__kmpc_distribute_static_fini(ptr addrspacecast (ptr addrspace(1) @anon.6daeacfa6de4527f9402700e18e2e17c.2 to ptr), i32 [[TMP0]]) #[[ATTR1]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 4, ptr addrspace(5) [[DOTOMP_IS_LAST]]) #[[ATTR1]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) [[DOTOMP_STRIDE]]) #[[ATTR1]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) [[DOTOMP_UB]]) #[[ATTR1]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) [[DOTOMP_LB]]) #[[ATTR1]]
; CHECK-NEXT:    br label [[OMP_PRECOND_END]]
; CHECK:       omp.precond.end:
; CHECK-NEXT:    ret void
;
entry:
  %.omp.lb = alloca i64, align 8, addrspace(5)
  %.omp.ub = alloca i64, align 8, addrspace(5)
  %.omp.stride = alloca i64, align 8, addrspace(5)
  %.omp.is_last = alloca i32, align 4, addrspace(5)
  %sext.mask = and i64 %size, 4294967295
  %cmp.not = icmp eq i64 %sext.mask, 0
  br i1 %cmp.not, label %omp.precond.end, label %omp.precond.then

omp.precond.then:                                 ; preds = %entry
  %.omp.stride.ascast = addrspacecast ptr addrspace(5) %.omp.stride to ptr
  %.omp.is_last.ascast = addrspacecast ptr addrspace(5) %.omp.is_last to ptr
  %.omp.ub.ascast = addrspacecast ptr addrspace(5) %.omp.ub to ptr
  %.omp.lb.ascast = addrspacecast ptr addrspace(5) %.omp.lb to ptr
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %.omp.lb) #2
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %.omp.ub) #2
  store i64 %.previous.lb., ptr addrspace(5) %.omp.lb, align 8, !tbaa !13
  store i64 %.previous.ub., ptr addrspace(5) %.omp.ub, align 8, !tbaa !13
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %.omp.stride) #2
  store i64 1, ptr addrspace(5) %.omp.stride, align 8, !tbaa !13
  call void @llvm.lifetime.start.p5(i64 4, ptr addrspace(5) %.omp.is_last) #2
  store i32 0, ptr addrspace(5) %.omp.is_last, align 4, !tbaa !17
  %0 = load i32, ptr %.global_tid., align 4, !tbaa !17
  call void @__kmpc_for_static_init_8u(ptr addrspacecast (ptr addrspace(1) @anon.6daeacfa6de4527f9402700e18e2e17c.3 to ptr), i32 %0, i32 33, ptr nonnull %.omp.is_last.ascast, ptr nonnull %.omp.lb.ascast, ptr nonnull %.omp.ub.ascast, ptr nonnull %.omp.stride.ascast, i64 1, i64 1) #2
  %1 = load i64, ptr addrspace(5) %.omp.lb, align 8, !tbaa !13
  %2 = load i64, ptr addrspace(5) %.omp.stride, align 8, !tbaa !13
  %add = add i64 %.previous.ub., 1
  %cmp422 = icmp ult i64 %1, %add
  br i1 %cmp422, label %omp.inner.for.body, label %omp.loop.exit

omp.inner.for.body:                               ; preds = %omp.inner.for.inc, %omp.precond.then
  %.omp.iv.023 = phi i64 [ %add12, %omp.inner.for.inc ], [ %1, %omp.precond.then ]
  %conv6 = trunc i64 %.omp.iv.023 to i32
  %call = call noundef zeroext i1 @_Z5test1i(i32 noundef %conv6) #8
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %omp.inner.for.body
  call void @_Z4use1Pi(ptr noundef %a) #8
  br label %if.end

if.else:                                          ; preds = %omp.inner.for.body
  call void @_Z4use2Pi(ptr noundef %a) #8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call8 = call noundef zeroext i1 @_Z5test2i(i32 noundef %conv6) #8
  br i1 %call8, label %if.then9, label %if.else10

if.then9:                                         ; preds = %if.end
  call void @_Z4use3Pi(ptr noundef %a) #8
  br label %omp.inner.for.inc

if.else10:                                        ; preds = %if.end
  call void @_Z4use4Pi(ptr noundef %a) #8
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %if.else10, %if.then9
  %add12 = add i64 %2, %.omp.iv.023
  %cmp4 = icmp ult i64 %add12, %add
  br i1 %cmp4, label %omp.inner.for.body, label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.inc, %omp.precond.then
  call void @__kmpc_distribute_static_fini(ptr addrspacecast (ptr addrspace(1) @anon.6daeacfa6de4527f9402700e18e2e17c.2 to ptr), i32 %0) #2
  call void @llvm.lifetime.end.p5(i64 4, ptr addrspace(5) %.omp.is_last) #2
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %.omp.stride) #2
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %.omp.ub) #2
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %.omp.lb) #2
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  ret void
}

; Function Attrs: nounwind
declare void @__kmpc_for_static_init_8u(ptr, i32, i32, ptr, ptr, ptr, ptr, i64, i64) local_unnamed_addr #2

; Function Attrs: convergent
declare noundef zeroext i1 @_Z5test1i(i32 noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare void @_Z4use1Pi(ptr noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare void @_Z4use2Pi(ptr noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare noundef zeroext i1 @_Z5test2i(i32 noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare void @_Z4use3Pi(ptr noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare void @_Z4use4Pi(ptr noundef) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @__kmpc_distribute_static_fini(ptr, i32) local_unnamed_addr #2

; Function Attrs: alwaysinline
declare void @__kmpc_parallel_51(ptr, i32, i32, i32, i32, ptr, ptr, ptr, i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @__kmpc_global_thread_num(ptr) local_unnamed_addr #2

declare void @__kmpc_target_deinit() local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #6

attributes #0 = { alwaysinline norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "kernel" "no-trapping-math"="true" "omp_target_thread_limit"="256" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" "uniform-work-group-size"="true" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline convergent norecurse nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
attributes #4 = { convergent "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
attributes #5 = { alwaysinline }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #7 = { nounwind memory(readwrite) }
attributes #8 = { convergent nounwind }

!omp_offload.info = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8, !9}
!opencl.ocl.version = !{!10}
!llvm.ident = !{!11, !12}

!0 = !{i32 0, i32 78, i32 1555352471, !"_Z6vecaddPiS_i", i32 14, i32 0, i32 0}
!2 = !{i32 1, !"amdgpu_code_object_version", i32 400}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 7, !"openmp", i32 51}
!5 = !{i32 7, !"openmp-device", i32 51}
!6 = !{i32 8, !"PIC Level", i32 2}
!7 = !{i32 4, !"amdgpu_hostcall", i32 1}
!8 = !{i32 1, !"ThinLTO", i32 0}
!9 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!10 = !{i32 2, i32 0}
!11 = !{!"clang version 18.0.0 (git@github.com:ivanradanov/llvm-project2.git 370bc940d0c7479bd0fc15626156076d1ec03f07)"}
!12 = !{!"AMD clang version 17.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.7.0 23352 d1e13c532a947d0cbfc94759c00dcf152294aa13)"}
!13 = !{!14, !14, i64 0}
!14 = !{!"long", !15, i64 0}
!15 = !{!"omnipotent char", !16, i64 0}
!16 = !{!"Simple C++ TBAA"}
!17 = !{!18, !18, i64 0}
!18 = !{!"int", !15, i64 0}
!19 = !{!20, !20, i64 0}
!20 = !{!"any pointer", !15, i64 0}
