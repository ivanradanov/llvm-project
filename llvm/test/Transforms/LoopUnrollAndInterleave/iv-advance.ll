; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=loop-unroll-and-interleave %s -S | FileCheck %s
; RUN: opt -passes=loop-unroll-and-interleave %s -S --luai-use-dynamic-convergence=1 | FileCheck %s --check-prefix=DRCHECK

target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

%struct.ident_t = type { i32, i32, i32, i32, ptr }
%struct.DynamicEnvironmentTy = type { i16 }
%struct.KernelEnvironmentTy = type { %struct.ConfigurationEnvironmentTy, ptr, ptr }
%struct.ConfigurationEnvironmentTy = type { i8, i8, i8, i32, i32, i32, i32, i32, i32 }
%struct.DeviceMemoryPoolTy = type { ptr, i64 }
%struct.DeviceMemoryPoolTrackingTy = type { i64, i64, i64, i64 }
%struct.DeviceEnvironmentTy = type { i32, i32, i32, i32, i64, i64, i64, i64 }

@0 = private unnamed_addr constant [86 x i8] c";main.cpp;__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23_debug__;24;3;;\00", align 1
@1 = private unnamed_addr addrspace(1) constant %struct.ident_t { i32 0, i32 2, i32 0, i32 85, ptr @0 }, align 8
@__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23_dynamic_environment = weak_odr protected addrspace(1) global %struct.DynamicEnvironmentTy zeroinitializer
@__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23_kernel_environment = weak_odr protected local_unnamed_addr addrspace(1) constant %struct.KernelEnvironmentTy { %struct.ConfigurationEnvironmentTy { i8 0, i8 0, i8 2, i32 1, i32 256, i32 0, i32 0, i32 0, i32 0 }, ptr addrspacecast (ptr addrspace(1) @1 to ptr), ptr addrspacecast (ptr addrspace(1) @__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23_dynamic_environment to ptr) }
@__omp_rtl_device_memory_pool = weak protected addrspace(1) global %struct.DeviceMemoryPoolTy zeroinitializer, align 8
@__omp_rtl_device_memory_pool_tracker = weak protected addrspace(1) global %struct.DeviceMemoryPoolTrackingTy zeroinitializer, align 8
@__omp_rtl_device_environment = weak protected addrspace(4) global %struct.DeviceEnvironmentTy undef, align 8
@llvm.used = appending addrspace(1) global [3 x ptr] [ptr addrspacecast (ptr addrspace(4) @__omp_rtl_device_environment to ptr), ptr addrspacecast (ptr addrspace(1) @__omp_rtl_device_memory_pool to ptr), ptr addrspacecast (ptr addrspace(1) @__omp_rtl_device_memory_pool_tracker to ptr)], section "llvm.metadata"

; Function Attrs: alwaysinline norecurse nounwind
define weak_odr protected amdgpu_kernel void @__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23(ptr noalias noundef %arg, i64 noundef %arg1, ptr noundef %arg2) local_unnamed_addr #0 {
; CHECK-LABEL: define weak_odr protected amdgpu_kernel void @__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23(
; CHECK-SAME: ptr noalias noundef [[ARG:%.*]], i64 noundef [[ARG1:%.*]], ptr noundef [[ARG2:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[I:%.*]] = trunc i64 [[ARG1]] to i32
; CHECK-NEXT:    [[I3:%.*]] = add nsw i32 [[I]], -1
; CHECK-NEXT:    [[I4:%.*]] = icmp sgt i32 [[I]], 0
; CHECK-NEXT:    br i1 [[I4]], label [[BB5:%.*]], label [[BB40:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    [[I6:%.*]] = tail call i32 @llvm.amdgcn.workgroup.id.x() #[[ATTR4:[0-9]+]], !range [[RNG17:![0-9]+]]
; CHECK-NEXT:    [[I7:%.*]] = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    [[I8:%.*]] = getelementptr inbounds i8, ptr addrspace(4) [[I7]], i64 4
; CHECK-NEXT:    [[I9:%.*]] = load i16, ptr addrspace(4) [[I8]], align 4
; CHECK-NEXT:    [[I10:%.*]] = getelementptr inbounds i8, ptr addrspace(4) [[I7]], i64 12
; CHECK-NEXT:    [[I11:%.*]] = load i32, ptr addrspace(4) [[I10]], align 4, !invariant.load [[META18:![0-9]+]]
; CHECK-NEXT:    [[I12:%.*]] = zext i16 [[I9]] to i32
; CHECK-NEXT:    [[I13:%.*]] = udiv i32 [[I11]], [[I12]]
; CHECK-NEXT:    [[I14:%.*]] = shl nsw i32 [[I6]], 8
; CHECK-NEXT:    [[I15:%.*]] = shl nsw i32 [[I13]], 8
; CHECK-NEXT:    [[I16:%.*]] = icmp slt i32 [[I14]], [[I]]
; CHECK-NEXT:    br i1 [[I16]], label [[BB17:%.*]], label [[BB40]]
; CHECK:       bb17:
; CHECK-NEXT:    [[I18:%.*]] = or disjoint i32 [[I14]], 255
; CHECK-NEXT:    [[I19:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I18]], i32 [[I3]]), !range [[RNG19:![0-9]+]]
; CHECK-NEXT:    [[I20:%.*]] = tail call i32 @llvm.amdgcn.workitem.id.x() #[[ATTR6:[0-9]+]], !range [[RNG20:![0-9]+]], !noundef [[META18]]
; CHECK-NEXT:    [[I36_ADVANCED2:%.*]] = add nsw i32 [[I15]], [[I19]]
; CHECK-NEXT:    [[I37_ADVANCED1:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED2]], i32 [[I3]])
; CHECK-NEXT:    [[I36_ADVANCED3:%.*]] = add nsw i32 [[I15]], [[I37_ADVANCED1]]
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_1_ADVANCED:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED3]], i32 [[I3]])
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[I14]]
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_24:%.*]] = add nsw i32 [[I15]], [[INITIAL_IV_COARSENED_1]]
; CHECK-NEXT:    [[COARSENED_STEP:%.*]] = mul i32 [[I15]], 3
; CHECK-NEXT:    [[TMP0:%.*]] = sub i32 [[I]], [[I14]]
; CHECK-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], [[I15]]
; CHECK-NEXT:    [[TMP2:%.*]] = sub i32 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = udiv i32 [[TMP2]], [[I15]]
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP3]], 3
; CHECK-NEXT:    [[TMP5:%.*]] = mul nsw i32 [[TMP4]], 3
; CHECK-NEXT:    [[TMP6:%.*]] = mul nsw i32 [[TMP5]], [[I15]]
; CHECK-NEXT:    [[EPILOGUE_START_IV:%.*]] = add i32 [[TMP6]], [[I14]]
; CHECK-NEXT:    [[IS_EPILOGUE_START:%.*]] = icmp eq i32 [[I14]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    br i1 [[IS_EPILOGUE_START]], label [[BB21_EPILOGUE:%.*]], label [[BB21:%.*]]
; CHECK:       bb21:
; CHECK-NEXT:    [[I22:%.*]] = phi i32 [ [[I19]], [[BB17]] ], [ [[I37_ADVANCED_ADVANCED:%.*]], [[BB34:%.*]] ]
; CHECK-NEXT:    [[I22_COARSENED_1:%.*]] = phi i32 [ [[I37_ADVANCED1]], [[BB17]] ], [ [[I37_ADVANCED_ADVANCED_COARSENED_1:%.*]], [[BB34]] ]
; CHECK-NEXT:    [[I22_COARSENED_2:%.*]] = phi i32 [ [[INITIAL_IV_COARSENED_1_ADVANCED]], [[BB17]] ], [ [[I37_ADVANCED_ADVANCED_COARSENED_2:%.*]], [[BB34]] ]
; CHECK-NEXT:    [[I23:%.*]] = phi i32 [ [[I14]], [[BB17]] ], [ [[TMP7:%.*]], [[BB34]] ]
; CHECK-NEXT:    [[I23_COARSENED_1:%.*]] = phi i32 [ [[INITIAL_IV_COARSENED_1]], [[BB17]] ], [ [[DOTCOARSENED_1:%.*]], [[BB34]] ]
; CHECK-NEXT:    [[I23_COARSENED_2:%.*]] = phi i32 [ [[INITIAL_IV_COARSENED_24]], [[BB17]] ], [ [[DOTCOARSENED_2:%.*]], [[BB34]] ]
; CHECK-NEXT:    [[I24:%.*]] = add nsw i32 [[I20]], [[I23]]
; CHECK-NEXT:    [[I24_COARSENED_1:%.*]] = add nsw i32 [[I20]], [[I23_COARSENED_1]]
; CHECK-NEXT:    [[I24_COARSENED_2:%.*]] = add nsw i32 [[I20]], [[I23_COARSENED_2]]
; CHECK-NEXT:    [[I25:%.*]] = icmp sgt i32 [[I24]], [[I22]]
; CHECK-NEXT:    [[I25_COARSENED_1:%.*]] = icmp sgt i32 [[I24_COARSENED_1]], [[I22_COARSENED_1]]
; CHECK-NEXT:    [[I25_COARSENED_2:%.*]] = icmp sgt i32 [[I24_COARSENED_2]], [[I22_COARSENED_2]]
; CHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0:%.*]]
; CHECK:       bb34:
; CHECK-NEXT:    fence syncscope("workgroup") seq_cst
; CHECK-NEXT:    tail call void @llvm.amdgcn.s.barrier() #[[ATTR7:[0-9]+]]
; CHECK-NEXT:    [[TMP7]] = add nsw i32 [[COARSENED_STEP]], [[I23]]
; CHECK-NEXT:    [[DOTCOARSENED_1]] = add nsw i32 [[COARSENED_STEP]], [[I23_COARSENED_1]]
; CHECK-NEXT:    [[DOTCOARSENED_2]] = add nsw i32 [[COARSENED_STEP]], [[I23_COARSENED_2]]
; CHECK-NEXT:    [[I35:%.*]] = add nsw i32 [[I15]], [[I23]]
; CHECK-NEXT:    [[I35_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[I23_COARSENED_1]]
; CHECK-NEXT:    [[I35_COARSENED_2:%.*]] = add nsw i32 [[I15]], [[I23_COARSENED_2]]
; CHECK-NEXT:    [[I36:%.*]] = add nsw i32 [[I15]], [[I22]]
; CHECK-NEXT:    [[I36_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[I22_COARSENED_1]]
; CHECK-NEXT:    [[I36_COARSENED_2:%.*]] = add nsw i32 [[I15]], [[I22_COARSENED_2]]
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_2:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36]], i32 [[I3]])
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_2_COARSENED_1:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_COARSENED_1]], i32 [[I3]])
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_2_COARSENED_2:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_COARSENED_2]], i32 [[I3]])
; CHECK-NEXT:    [[I38:%.*]] = icmp slt i32 [[I35]], [[I]]
; CHECK-NEXT:    [[I38_COARSENED_1:%.*]] = icmp slt i32 [[I35_COARSENED_1]], [[I]]
; CHECK-NEXT:    [[I38_COARSENED_2:%.*]] = icmp slt i32 [[I35_COARSENED_2]], [[I]]
; CHECK-NEXT:    [[I36_ADVANCED:%.*]] = add nsw i32 [[I15]], [[INITIAL_IV_COARSENED_2]]
; CHECK-NEXT:    [[I36_ADVANCED_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[INITIAL_IV_COARSENED_2_COARSENED_1]]
; CHECK-NEXT:    [[I36_ADVANCED_COARSENED_2:%.*]] = add nsw i32 [[I15]], [[INITIAL_IV_COARSENED_2_COARSENED_2]]
; CHECK-NEXT:    [[I37_ADVANCED:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED]], i32 [[I3]])
; CHECK-NEXT:    [[I37_ADVANCED_COARSENED_1:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_COARSENED_1]], i32 [[I3]])
; CHECK-NEXT:    [[I37_ADVANCED_COARSENED_2:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_COARSENED_2]], i32 [[I3]])
; CHECK-NEXT:    [[I36_ADVANCED_ADVANCED:%.*]] = add nsw i32 [[I15]], [[I37_ADVANCED]]
; CHECK-NEXT:    [[I36_ADVANCED_ADVANCED_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[I37_ADVANCED_COARSENED_1]]
; CHECK-NEXT:    [[I36_ADVANCED_ADVANCED_COARSENED_2:%.*]] = add nsw i32 [[I15]], [[I37_ADVANCED_COARSENED_2]]
; CHECK-NEXT:    [[I37_ADVANCED_ADVANCED]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_ADVANCED]], i32 [[I3]])
; CHECK-NEXT:    [[I37_ADVANCED_ADVANCED_COARSENED_1]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_ADVANCED_COARSENED_1]], i32 [[I3]])
; CHECK-NEXT:    [[I37_ADVANCED_ADVANCED_COARSENED_2]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_ADVANCED_COARSENED_2]], i32 [[I3]])
; CHECK-NEXT:    [[TMP8:%.*]] = icmp slt i32 [[TMP7]], [[I]]
; CHECK-NEXT:    [[DOTCOARSENED_16:%.*]] = icmp slt i32 [[DOTCOARSENED_1]], [[I]]
; CHECK-NEXT:    [[DOTCOARSENED_27:%.*]] = icmp slt i32 [[DOTCOARSENED_2]], [[I]]
; CHECK-NEXT:    [[IS_EPILOGUE_START5:%.*]] = icmp eq i32 [[TMP7]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    [[IS_EPILOGUE_START5_COARSENED_1:%.*]] = icmp eq i32 [[DOTCOARSENED_1]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    [[IS_EPILOGUE_START5_COARSENED_2:%.*]] = icmp eq i32 [[DOTCOARSENED_2]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    br i1 [[IS_EPILOGUE_START5]], label [[COARSENED_END_CHECK:%.*]], label [[BB21]], !llvm.loop [[LOOP21:![0-9]+]]
; CHECK:       bb21.divergent.entry.drs.0.intro.0:
; CHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0:%.*]]
; CHECK:       bb21.divergent.entry.drs.0.intro.1:
; CHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0]]
; CHECK:       bb21.divergent.entry.drs.0.intro.2:
; CHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0]]
; CHECK:       bb21.divergent.entry.drs.0:
; CHECK-NEXT:    [[DR_COARSENED_IDENT_0:%.*]] = phi i32 [ 0, [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ 1, [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1:%.*]] ], [ 2, [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2:%.*]] ]
; CHECK-NEXT:    [[I22_DRS_0_REG2MEM_0:%.*]] = phi i32 [ [[I22]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[I22_COARSENED_1]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ], [ [[I22_COARSENED_2]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2]] ]
; CHECK-NEXT:    [[I24_DRS_0_REG2MEM_0:%.*]] = phi i32 [ [[I24]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[I24_COARSENED_1]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ], [ [[I24_COARSENED_2]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2]] ]
; CHECK-NEXT:    [[I25_DRS_0_REG2MEM_0:%.*]] = phi i1 [ [[I25]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[I25_COARSENED_1]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ], [ [[I25_COARSENED_2]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2]] ]
; CHECK-NEXT:    br i1 [[I25_DRS_0_REG2MEM_0]], label [[BB34_DIVERGENT_EXIT_DRS_0:%.*]], label [[BB26_DRS_0:%.*]]
; CHECK:       bb26.drs.0:
; CHECK-NEXT:    br label [[BB27_DRS_0:%.*]]
; CHECK:       bb27.drs.0:
; CHECK-NEXT:    [[I28_DRS_0:%.*]] = phi i32 [ [[I31_DRS_0:%.*]], [[BB27_DIVERGENT_ENTRY_DRS_0:%.*]] ], [ [[I24_DRS_0_REG2MEM_0]], [[BB26_DRS_0]] ]
; CHECK-NEXT:    [[I29_DRS_0:%.*]] = sext i32 [[I28_DRS_0]] to i64
; CHECK-NEXT:    [[I30_DRS_0:%.*]] = getelementptr inbounds float, ptr [[ARG2]], i64 [[I29_DRS_0]]
; CHECK-NEXT:    store float 1.000000e+00, ptr [[I30_DRS_0]], align 4, !tbaa [[TBAA25:![0-9]+]], !noalias [[META29:![0-9]+]]
; CHECK-NEXT:    [[I31_DRS_0]] = add nsw i32 [[I28_DRS_0]], [[I12]]
; CHECK-NEXT:    [[I32_DRS_0:%.*]] = icmp sgt i32 [[I31_DRS_0]], [[I22_DRS_0_REG2MEM_0]]
; CHECK-NEXT:    br label [[BB27_DIVERGENT_ENTRY_DRS_0]]
; CHECK:       bb27.divergent.entry.drs.0:
; CHECK-NEXT:    br i1 [[I32_DRS_0]], label [[BB33_DIVERGENT_EXIT_DRS_0:%.*]], label [[BB27_DRS_0]], !llvm.loop [[LOOP32:![0-9]+]]
; CHECK:       bb33.divergent.exit.drs.0:
; CHECK-NEXT:    br label [[BB33_DRS_0:%.*]]
; CHECK:       bb33.drs.0:
; CHECK-NEXT:    br label [[BB34_DIVERGENT_EXIT_DRS_0]]
; CHECK:       bb34.divergent.exit.drs.0:
; CHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT_0]], label [[BB34_DIVERGENT_EXIT_DRS_0_OUTRO_0:%.*]] [
; CHECK-NEXT:      i32 1, label [[BB34_DIVERGENT_EXIT_DRS_0_OUTRO_1:%.*]]
; CHECK-NEXT:      i32 2, label [[BB34_DIVERGENT_EXIT_DRS_0_OUTRO_2:%.*]]
; CHECK-NEXT:    ]
; CHECK:       bb34.divergent.exit.drs.0.outro.0:
; CHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1]]
; CHECK:       bb34.divergent.exit.drs.0.outro.1:
; CHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2]]
; CHECK:       bb34.divergent.exit.drs.0.outro.2:
; CHECK-NEXT:    br label [[BB34]]
; CHECK:       coarsened.end.check:
; CHECK-NEXT:    br i1 [[TMP8]], label [[BB21_EPILOGUE]], label [[BB39:%.*]]
; CHECK:       bb21.epilogue:
; CHECK-NEXT:    [[I22_EPILOGUE:%.*]] = phi i32 [ [[I37_ADVANCED_ADVANCED]], [[COARSENED_END_CHECK]] ], [ [[INITIAL_IV_COARSENED_2_EPILOGUE:%.*]], [[BB34_EPILOGUE:%.*]] ], [ [[I19]], [[BB17]] ]
; CHECK-NEXT:    [[I23_EPILOGUE:%.*]] = phi i32 [ [[TMP7]], [[COARSENED_END_CHECK]] ], [ [[I35_EPILOGUE:%.*]], [[BB34_EPILOGUE]] ], [ [[I14]], [[BB17]] ]
; CHECK-NEXT:    [[I24_EPILOGUE:%.*]] = add nsw i32 [[I20]], [[I23_EPILOGUE]]
; CHECK-NEXT:    [[I25_EPILOGUE:%.*]] = icmp sgt i32 [[I24_EPILOGUE]], [[I22_EPILOGUE]]
; CHECK-NEXT:    br i1 [[I25_EPILOGUE]], label [[BB34_EPILOGUE]], label [[BB26_EPILOGUE:%.*]]
; CHECK:       bb26.epilogue:
; CHECK-NEXT:    br label [[BB27_EPILOGUE:%.*]]
; CHECK:       bb27.epilogue:
; CHECK-NEXT:    [[I28_EPILOGUE:%.*]] = phi i32 [ [[I31_EPILOGUE:%.*]], [[BB27_EPILOGUE]] ], [ [[I24_EPILOGUE]], [[BB26_EPILOGUE]] ]
; CHECK-NEXT:    [[I29_EPILOGUE:%.*]] = sext i32 [[I28_EPILOGUE]] to i64
; CHECK-NEXT:    [[I30_EPILOGUE:%.*]] = getelementptr inbounds float, ptr [[ARG2]], i64 [[I29_EPILOGUE]]
; CHECK-NEXT:    store float 1.000000e+00, ptr [[I30_EPILOGUE]], align 4, !tbaa [[TBAA25]], !noalias [[META29]]
; CHECK-NEXT:    [[I31_EPILOGUE]] = add nsw i32 [[I28_EPILOGUE]], [[I12]]
; CHECK-NEXT:    [[I32_EPILOGUE:%.*]] = icmp sgt i32 [[I31_EPILOGUE]], [[I22_EPILOGUE]]
; CHECK-NEXT:    br i1 [[I32_EPILOGUE]], label [[BB33_EPILOGUE:%.*]], label [[BB27_EPILOGUE]], !llvm.loop [[LOOP32]]
; CHECK:       bb33.epilogue:
; CHECK-NEXT:    br label [[BB34_EPILOGUE]]
; CHECK:       bb34.epilogue:
; CHECK-NEXT:    fence syncscope("workgroup") seq_cst
; CHECK-NEXT:    tail call void @llvm.amdgcn.s.barrier() #[[ATTR7]]
; CHECK-NEXT:    [[I35_EPILOGUE]] = add nsw i32 [[I15]], [[I23_EPILOGUE]]
; CHECK-NEXT:    [[I36_EPILOGUE:%.*]] = add nsw i32 [[I15]], [[I22_EPILOGUE]]
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_2_EPILOGUE]] = tail call i32 @llvm.smin.i32(i32 [[I36_EPILOGUE]], i32 [[I3]])
; CHECK-NEXT:    [[I38_EPILOGUE:%.*]] = icmp slt i32 [[I35_EPILOGUE]], [[I]]
; CHECK-NEXT:    br i1 [[I38_EPILOGUE]], label [[BB21_EPILOGUE]], label [[BB39]], !llvm.loop [[LOOP34:![0-9]+]]
; CHECK:       bb39:
; CHECK-NEXT:    br label [[BB40]]
; CHECK:       bb40:
; CHECK-NEXT:    ret void
;
; DRCHECK-LABEL: define weak_odr protected amdgpu_kernel void @__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23(
; DRCHECK-SAME: ptr noalias noundef [[ARG:%.*]], i64 noundef [[ARG1:%.*]], ptr noundef [[ARG2:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; DRCHECK-NEXT:  bb:
; DRCHECK-NEXT:    [[I:%.*]] = trunc i64 [[ARG1]] to i32
; DRCHECK-NEXT:    [[I3:%.*]] = add nsw i32 [[I]], -1
; DRCHECK-NEXT:    [[I4:%.*]] = icmp sgt i32 [[I]], 0
; DRCHECK-NEXT:    br i1 [[I4]], label [[BB5:%.*]], label [[BB40:%.*]]
; DRCHECK:       bb5:
; DRCHECK-NEXT:    [[I6:%.*]] = tail call i32 @llvm.amdgcn.workgroup.id.x() #[[ATTR4:[0-9]+]], !range [[RNG17:![0-9]+]]
; DRCHECK-NEXT:    [[I7:%.*]] = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #[[ATTR5:[0-9]+]]
; DRCHECK-NEXT:    [[I8:%.*]] = getelementptr inbounds i8, ptr addrspace(4) [[I7]], i64 4
; DRCHECK-NEXT:    [[I9:%.*]] = load i16, ptr addrspace(4) [[I8]], align 4
; DRCHECK-NEXT:    [[I10:%.*]] = getelementptr inbounds i8, ptr addrspace(4) [[I7]], i64 12
; DRCHECK-NEXT:    [[I11:%.*]] = load i32, ptr addrspace(4) [[I10]], align 4, !invariant.load [[META18:![0-9]+]]
; DRCHECK-NEXT:    [[I12:%.*]] = zext i16 [[I9]] to i32
; DRCHECK-NEXT:    [[I13:%.*]] = udiv i32 [[I11]], [[I12]]
; DRCHECK-NEXT:    [[I14:%.*]] = shl nsw i32 [[I6]], 8
; DRCHECK-NEXT:    [[I15:%.*]] = shl nsw i32 [[I13]], 8
; DRCHECK-NEXT:    [[I16:%.*]] = icmp slt i32 [[I14]], [[I]]
; DRCHECK-NEXT:    br i1 [[I16]], label [[BB17:%.*]], label [[BB40]]
; DRCHECK:       bb17:
; DRCHECK-NEXT:    [[I18:%.*]] = or disjoint i32 [[I14]], 255
; DRCHECK-NEXT:    [[I19:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I18]], i32 [[I3]]), !range [[RNG19:![0-9]+]]
; DRCHECK-NEXT:    [[I20:%.*]] = tail call i32 @llvm.amdgcn.workitem.id.x() #[[ATTR6:[0-9]+]], !range [[RNG20:![0-9]+]], !noundef [[META18]]
; DRCHECK-NEXT:    [[I36_ADVANCED2:%.*]] = add nsw i32 [[I15]], [[I19]]
; DRCHECK-NEXT:    [[I37_ADVANCED1:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED2]], i32 [[I3]])
; DRCHECK-NEXT:    [[I36_ADVANCED3:%.*]] = add nsw i32 [[I15]], [[I37_ADVANCED1]]
; DRCHECK-NEXT:    [[INITIAL_IV_COARSENED_1_ADVANCED:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED3]], i32 [[I3]])
; DRCHECK-NEXT:    [[INITIAL_IV_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[I14]]
; DRCHECK-NEXT:    [[INITIAL_IV_COARSENED_24:%.*]] = add nsw i32 [[I15]], [[INITIAL_IV_COARSENED_1]]
; DRCHECK-NEXT:    [[COARSENED_STEP:%.*]] = mul i32 [[I15]], 3
; DRCHECK-NEXT:    [[TMP0:%.*]] = sub i32 [[I]], [[I14]]
; DRCHECK-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], [[I15]]
; DRCHECK-NEXT:    [[TMP2:%.*]] = sub i32 [[TMP1]], 1
; DRCHECK-NEXT:    [[TMP3:%.*]] = udiv i32 [[TMP2]], [[I15]]
; DRCHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP3]], 3
; DRCHECK-NEXT:    [[TMP5:%.*]] = mul nsw i32 [[TMP4]], 3
; DRCHECK-NEXT:    [[TMP6:%.*]] = mul nsw i32 [[TMP5]], [[I15]]
; DRCHECK-NEXT:    [[EPILOGUE_START_IV:%.*]] = add i32 [[TMP6]], [[I14]]
; DRCHECK-NEXT:    [[IS_EPILOGUE_START:%.*]] = icmp eq i32 [[I14]], [[EPILOGUE_START_IV]]
; DRCHECK-NEXT:    br i1 [[IS_EPILOGUE_START]], label [[BB21_EPILOGUE:%.*]], label [[BB21:%.*]]
; DRCHECK:       bb21:
; DRCHECK-NEXT:    [[I22:%.*]] = phi i32 [ [[I19]], [[BB17]] ], [ [[I37_ADVANCED_ADVANCED:%.*]], [[BB34:%.*]] ]
; DRCHECK-NEXT:    [[I22_COARSENED_1:%.*]] = phi i32 [ [[I37_ADVANCED1]], [[BB17]] ], [ [[I37_ADVANCED_ADVANCED_COARSENED_1:%.*]], [[BB34]] ]
; DRCHECK-NEXT:    [[I22_COARSENED_2:%.*]] = phi i32 [ [[INITIAL_IV_COARSENED_1_ADVANCED]], [[BB17]] ], [ [[I37_ADVANCED_ADVANCED_COARSENED_2:%.*]], [[BB34]] ]
; DRCHECK-NEXT:    [[I23:%.*]] = phi i32 [ [[I14]], [[BB17]] ], [ [[TMP13:%.*]], [[BB34]] ]
; DRCHECK-NEXT:    [[I23_COARSENED_1:%.*]] = phi i32 [ [[INITIAL_IV_COARSENED_1]], [[BB17]] ], [ [[DOTCOARSENED_1:%.*]], [[BB34]] ]
; DRCHECK-NEXT:    [[I23_COARSENED_2:%.*]] = phi i32 [ [[INITIAL_IV_COARSENED_24]], [[BB17]] ], [ [[DOTCOARSENED_2:%.*]], [[BB34]] ]
; DRCHECK-NEXT:    [[I24:%.*]] = add nsw i32 [[I20]], [[I23]]
; DRCHECK-NEXT:    [[I24_COARSENED_1:%.*]] = add nsw i32 [[I20]], [[I23_COARSENED_1]]
; DRCHECK-NEXT:    [[I24_COARSENED_2:%.*]] = add nsw i32 [[I20]], [[I23_COARSENED_2]]
; DRCHECK-NEXT:    [[I25:%.*]] = icmp sgt i32 [[I24]], [[I22]]
; DRCHECK-NEXT:    [[I25_COARSENED_1:%.*]] = icmp sgt i32 [[I24_COARSENED_1]], [[I22_COARSENED_1]]
; DRCHECK-NEXT:    [[I25_COARSENED_2:%.*]] = icmp sgt i32 [[I24_COARSENED_2]], [[I22_COARSENED_2]]
; DRCHECK-NEXT:    [[TMP7:%.*]] = icmp eq i1 [[I25_COARSENED_1]], [[I25]]
; DRCHECK-NEXT:    [[TMP8:%.*]] = icmp eq i1 [[I25_COARSENED_2]], [[I25]]
; DRCHECK-NEXT:    [[TMP9:%.*]] = and i1 [[TMP8]], [[TMP7]]
; DRCHECK-NEXT:    br i1 [[TMP9]], label [[BB21_DIVERGENT_ENTRY:%.*]], label [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0:%.*]]
; DRCHECK:       bb21.divergent.entry:
; DRCHECK-NEXT:    br i1 [[I25]], label [[BB34_DIVERGENT_EXIT:%.*]], label [[BB26:%.*]]
; DRCHECK:       bb26:
; DRCHECK-NEXT:    br label [[BB27:%.*]]
; DRCHECK:       bb27:
; DRCHECK-NEXT:    [[I28:%.*]] = phi i32 [ [[I31:%.*]], [[BB27_DIVERGENT_ENTRY:%.*]] ], [ [[I24]], [[BB26]] ]
; DRCHECK-NEXT:    [[I28_COARSENED_1:%.*]] = phi i32 [ [[I31_COARSENED_1:%.*]], [[BB27_DIVERGENT_ENTRY]] ], [ [[I24_COARSENED_1]], [[BB26]] ]
; DRCHECK-NEXT:    [[I28_COARSENED_2:%.*]] = phi i32 [ [[I31_COARSENED_2:%.*]], [[BB27_DIVERGENT_ENTRY]] ], [ [[I24_COARSENED_2]], [[BB26]] ]
; DRCHECK-NEXT:    [[I29:%.*]] = sext i32 [[I28]] to i64
; DRCHECK-NEXT:    [[I29_COARSENED_1:%.*]] = sext i32 [[I28_COARSENED_1]] to i64
; DRCHECK-NEXT:    [[I29_COARSENED_2:%.*]] = sext i32 [[I28_COARSENED_2]] to i64
; DRCHECK-NEXT:    [[I30:%.*]] = getelementptr inbounds float, ptr [[ARG2]], i64 [[I29]]
; DRCHECK-NEXT:    [[I30_COARSENED_1:%.*]] = getelementptr inbounds float, ptr [[ARG2]], i64 [[I29_COARSENED_1]]
; DRCHECK-NEXT:    [[I30_COARSENED_2:%.*]] = getelementptr inbounds float, ptr [[ARG2]], i64 [[I29_COARSENED_2]]
; DRCHECK-NEXT:    store float 1.000000e+00, ptr [[I30]], align 4, !tbaa [[TBAA21:![0-9]+]], !noalias [[META25:![0-9]+]]
; DRCHECK-NEXT:    store float 1.000000e+00, ptr [[I30_COARSENED_1]], align 4, !tbaa [[TBAA21]], !noalias [[META25]]
; DRCHECK-NEXT:    store float 1.000000e+00, ptr [[I30_COARSENED_2]], align 4, !tbaa [[TBAA21]], !noalias [[META25]]
; DRCHECK-NEXT:    [[I31]] = add nsw i32 [[I28]], [[I12]]
; DRCHECK-NEXT:    [[I31_COARSENED_1]] = add nsw i32 [[I28_COARSENED_1]], [[I12]]
; DRCHECK-NEXT:    [[I31_COARSENED_2]] = add nsw i32 [[I28_COARSENED_2]], [[I12]]
; DRCHECK-NEXT:    [[I32:%.*]] = icmp sgt i32 [[I31]], [[I22]]
; DRCHECK-NEXT:    [[I32_COARSENED_1:%.*]] = icmp sgt i32 [[I31_COARSENED_1]], [[I22_COARSENED_1]]
; DRCHECK-NEXT:    [[I32_COARSENED_2:%.*]] = icmp sgt i32 [[I31_COARSENED_2]], [[I22_COARSENED_2]]
; DRCHECK-NEXT:    [[TMP10:%.*]] = icmp eq i1 [[I32_COARSENED_1]], [[I32]]
; DRCHECK-NEXT:    [[TMP11:%.*]] = icmp eq i1 [[I32_COARSENED_2]], [[I32]]
; DRCHECK-NEXT:    [[TMP12:%.*]] = and i1 [[TMP11]], [[TMP10]]
; DRCHECK-NEXT:    br i1 [[TMP12]], label [[BB27_DIVERGENT_ENTRY]], label [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_0:%.*]]
; DRCHECK:       bb27.divergent.entry:
; DRCHECK-NEXT:    br i1 [[I32]], label [[BB33_DIVERGENT_EXIT:%.*]], label [[BB27]], !llvm.loop [[LOOP28:![0-9]+]]
; DRCHECK:       bb33.divergent.exit:
; DRCHECK-NEXT:    br label [[BB33:%.*]]
; DRCHECK:       bb33:
; DRCHECK-NEXT:    br label [[BB34_DIVERGENT_EXIT]]
; DRCHECK:       bb27.drs.1:
; DRCHECK-NEXT:    [[I29_DRS_1:%.*]] = sext i32 [[I31_DRS_1_REG2MEM_0:%.*]] to i64
; DRCHECK-NEXT:    [[I30_DRS_1:%.*]] = getelementptr inbounds float, ptr [[ARG2]], i64 [[I29_DRS_1]]
; DRCHECK-NEXT:    store float 1.000000e+00, ptr [[I30_DRS_1]], align 4, !tbaa [[TBAA21]], !noalias [[META25]]
; DRCHECK-NEXT:    [[I31_DRS_1:%.*]] = add nsw i32 [[I31_DRS_1_REG2MEM_0]], [[I12]]
; DRCHECK-NEXT:    [[I32_DRS_1:%.*]] = icmp sgt i32 [[I31_DRS_1]], [[I22_DRS_1_REG2MEM_0:%.*]]
; DRCHECK-NEXT:    br label [[BB27_DIVERGENT_ENTRY_DRS_1:%.*]]
; DRCHECK:       bb27.divergent.entry.drs.1.intro.0:
; DRCHECK-NEXT:    br label [[BB27_DIVERGENT_ENTRY_DRS_1]]
; DRCHECK:       bb27.divergent.entry.drs.1.intro.1:
; DRCHECK-NEXT:    br label [[BB27_DIVERGENT_ENTRY_DRS_1]]
; DRCHECK:       bb27.divergent.entry.drs.1.intro.2:
; DRCHECK-NEXT:    br label [[BB27_DIVERGENT_ENTRY_DRS_1]]
; DRCHECK:       bb27.divergent.entry.drs.1:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT16_0:%.*]] = phi i32 [ 0, [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ 1, [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_1:%.*]] ], [ 2, [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_2:%.*]] ], [ [[DR_COARSENED_IDENT16_0]], [[BB27_DRS_1:%.*]] ]
; DRCHECK-NEXT:    [[I31_DRS_1_REG2MEM_0]] = phi i32 [ [[I31]], [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ [[I31_COARSENED_1]], [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_1]] ], [ [[I31_COARSENED_2]], [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_2]] ], [ [[I31_DRS_1]], [[BB27_DRS_1]] ]
; DRCHECK-NEXT:    [[I22_DRS_1_REG2MEM_0]] = phi i32 [ [[I22]], [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ [[I22_COARSENED_1]], [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_1]] ], [ [[I22_COARSENED_2]], [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_2]] ], [ [[I22_DRS_1_REG2MEM_0]], [[BB27_DRS_1]] ]
; DRCHECK-NEXT:    [[I32_DRS_1_REG2MEM_0:%.*]] = phi i1 [ [[I32]], [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_0]] ], [ [[I32_COARSENED_1]], [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_1]] ], [ [[I32_COARSENED_2]], [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_2]] ], [ [[I32_DRS_1]], [[BB27_DRS_1]] ]
; DRCHECK-NEXT:    br i1 [[I32_DRS_1_REG2MEM_0]], label [[BB33_DIVERGENT_EXIT_DRS_1:%.*]], label [[BB27_DRS_1]], !llvm.loop [[LOOP28]]
; DRCHECK:       bb33.divergent.exit.drs.1:
; DRCHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT16_0]], label [[BB33_DIVERGENT_EXIT_DRS_1_OUTRO_0:%.*]] [
; DRCHECK-NEXT:      i32 1, label [[BB33_DIVERGENT_EXIT_DRS_1_OUTRO_1:%.*]]
; DRCHECK-NEXT:      i32 2, label [[BB33_DIVERGENT_EXIT_DRS_1_OUTRO_2:%.*]]
; DRCHECK-NEXT:    ]
; DRCHECK:       bb33.divergent.exit.drs.1.outro.0:
; DRCHECK-NEXT:    br label [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_1]]
; DRCHECK:       bb33.divergent.exit.drs.1.outro.1:
; DRCHECK-NEXT:    br label [[BB27_DIVERGENT_ENTRY_DRS_1_INTRO_2]]
; DRCHECK:       bb33.divergent.exit.drs.1.outro.2:
; DRCHECK-NEXT:    br label [[BB33]]
; DRCHECK:       bb34.divergent.exit:
; DRCHECK-NEXT:    br label [[BB34]]
; DRCHECK:       bb34:
; DRCHECK-NEXT:    fence syncscope("workgroup") seq_cst
; DRCHECK-NEXT:    tail call void @llvm.amdgcn.s.barrier() #[[ATTR7:[0-9]+]]
; DRCHECK-NEXT:    [[TMP13]] = add nsw i32 [[COARSENED_STEP]], [[I23]]
; DRCHECK-NEXT:    [[DOTCOARSENED_1]] = add nsw i32 [[COARSENED_STEP]], [[I23_COARSENED_1]]
; DRCHECK-NEXT:    [[DOTCOARSENED_2]] = add nsw i32 [[COARSENED_STEP]], [[I23_COARSENED_2]]
; DRCHECK-NEXT:    [[I35:%.*]] = add nsw i32 [[I15]], [[I23]]
; DRCHECK-NEXT:    [[I35_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[I23_COARSENED_1]]
; DRCHECK-NEXT:    [[I35_COARSENED_2:%.*]] = add nsw i32 [[I15]], [[I23_COARSENED_2]]
; DRCHECK-NEXT:    [[I36:%.*]] = add nsw i32 [[I15]], [[I22]]
; DRCHECK-NEXT:    [[I36_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[I22_COARSENED_1]]
; DRCHECK-NEXT:    [[I36_COARSENED_2:%.*]] = add nsw i32 [[I15]], [[I22_COARSENED_2]]
; DRCHECK-NEXT:    [[INITIAL_IV_COARSENED_2:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36]], i32 [[I3]])
; DRCHECK-NEXT:    [[INITIAL_IV_COARSENED_2_COARSENED_1:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_COARSENED_1]], i32 [[I3]])
; DRCHECK-NEXT:    [[INITIAL_IV_COARSENED_2_COARSENED_2:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_COARSENED_2]], i32 [[I3]])
; DRCHECK-NEXT:    [[I38:%.*]] = icmp slt i32 [[I35]], [[I]]
; DRCHECK-NEXT:    [[I38_COARSENED_1:%.*]] = icmp slt i32 [[I35_COARSENED_1]], [[I]]
; DRCHECK-NEXT:    [[I38_COARSENED_2:%.*]] = icmp slt i32 [[I35_COARSENED_2]], [[I]]
; DRCHECK-NEXT:    [[I36_ADVANCED:%.*]] = add nsw i32 [[I15]], [[INITIAL_IV_COARSENED_2]]
; DRCHECK-NEXT:    [[I36_ADVANCED_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[INITIAL_IV_COARSENED_2_COARSENED_1]]
; DRCHECK-NEXT:    [[I36_ADVANCED_COARSENED_2:%.*]] = add nsw i32 [[I15]], [[INITIAL_IV_COARSENED_2_COARSENED_2]]
; DRCHECK-NEXT:    [[I37_ADVANCED:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED]], i32 [[I3]])
; DRCHECK-NEXT:    [[I37_ADVANCED_COARSENED_1:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_COARSENED_1]], i32 [[I3]])
; DRCHECK-NEXT:    [[I37_ADVANCED_COARSENED_2:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_COARSENED_2]], i32 [[I3]])
; DRCHECK-NEXT:    [[I36_ADVANCED_ADVANCED:%.*]] = add nsw i32 [[I15]], [[I37_ADVANCED]]
; DRCHECK-NEXT:    [[I36_ADVANCED_ADVANCED_COARSENED_1:%.*]] = add nsw i32 [[I15]], [[I37_ADVANCED_COARSENED_1]]
; DRCHECK-NEXT:    [[I36_ADVANCED_ADVANCED_COARSENED_2:%.*]] = add nsw i32 [[I15]], [[I37_ADVANCED_COARSENED_2]]
; DRCHECK-NEXT:    [[I37_ADVANCED_ADVANCED]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_ADVANCED]], i32 [[I3]])
; DRCHECK-NEXT:    [[I37_ADVANCED_ADVANCED_COARSENED_1]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_ADVANCED_COARSENED_1]], i32 [[I3]])
; DRCHECK-NEXT:    [[I37_ADVANCED_ADVANCED_COARSENED_2]] = tail call i32 @llvm.smin.i32(i32 [[I36_ADVANCED_ADVANCED_COARSENED_2]], i32 [[I3]])
; DRCHECK-NEXT:    [[TMP14:%.*]] = icmp slt i32 [[TMP13]], [[I]]
; DRCHECK-NEXT:    [[DOTCOARSENED_16:%.*]] = icmp slt i32 [[DOTCOARSENED_1]], [[I]]
; DRCHECK-NEXT:    [[DOTCOARSENED_27:%.*]] = icmp slt i32 [[DOTCOARSENED_2]], [[I]]
; DRCHECK-NEXT:    [[IS_EPILOGUE_START5:%.*]] = icmp eq i32 [[TMP13]], [[EPILOGUE_START_IV]]
; DRCHECK-NEXT:    [[IS_EPILOGUE_START5_COARSENED_1:%.*]] = icmp eq i32 [[DOTCOARSENED_1]], [[EPILOGUE_START_IV]]
; DRCHECK-NEXT:    [[IS_EPILOGUE_START5_COARSENED_2:%.*]] = icmp eq i32 [[DOTCOARSENED_2]], [[EPILOGUE_START_IV]]
; DRCHECK-NEXT:    br i1 [[IS_EPILOGUE_START5]], label [[COARSENED_END_CHECK:%.*]], label [[BB21]], !llvm.loop [[LOOP31:![0-9]+]]
; DRCHECK:       bb21.divergent.entry.drs.0.intro.0:
; DRCHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0:%.*]]
; DRCHECK:       bb21.divergent.entry.drs.0.intro.1:
; DRCHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0]]
; DRCHECK:       bb21.divergent.entry.drs.0.intro.2:
; DRCHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0]]
; DRCHECK:       bb21.divergent.entry.drs.0:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_0:%.*]] = phi i32 [ 0, [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ 1, [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1:%.*]] ], [ 2, [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2:%.*]] ]
; DRCHECK-NEXT:    [[I22_DRS_0_REG2MEM_0:%.*]] = phi i32 [ [[I22]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[I22_COARSENED_1]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ], [ [[I22_COARSENED_2]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2]] ]
; DRCHECK-NEXT:    [[I24_DRS_0_REG2MEM_0:%.*]] = phi i32 [ [[I24]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[I24_COARSENED_1]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ], [ [[I24_COARSENED_2]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2]] ]
; DRCHECK-NEXT:    [[I25_DRS_0_REG2MEM_0:%.*]] = phi i1 [ [[I25]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_0]] ], [ [[I25_COARSENED_1]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1]] ], [ [[I25_COARSENED_2]], [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2]] ]
; DRCHECK-NEXT:    br i1 [[I25_DRS_0_REG2MEM_0]], label [[BB34_DIVERGENT_EXIT_DRS_0:%.*]], label [[BB26_DRS_0:%.*]]
; DRCHECK:       bb26.drs.0:
; DRCHECK-NEXT:    br label [[BB27_DRS_0:%.*]]
; DRCHECK:       bb27.drs.0:
; DRCHECK-NEXT:    [[I28_DRS_0:%.*]] = phi i32 [ [[I31_DRS_0:%.*]], [[BB27_DIVERGENT_ENTRY_DRS_0:%.*]] ], [ [[I24_DRS_0_REG2MEM_0]], [[BB26_DRS_0]] ]
; DRCHECK-NEXT:    [[I29_DRS_0:%.*]] = sext i32 [[I28_DRS_0]] to i64
; DRCHECK-NEXT:    [[I30_DRS_0:%.*]] = getelementptr inbounds float, ptr [[ARG2]], i64 [[I29_DRS_0]]
; DRCHECK-NEXT:    store float 1.000000e+00, ptr [[I30_DRS_0]], align 4, !tbaa [[TBAA21]], !noalias [[META25]]
; DRCHECK-NEXT:    [[I31_DRS_0]] = add nsw i32 [[I28_DRS_0]], [[I12]]
; DRCHECK-NEXT:    [[I32_DRS_0:%.*]] = icmp sgt i32 [[I31_DRS_0]], [[I22_DRS_0_REG2MEM_0]]
; DRCHECK-NEXT:    br label [[BB27_DIVERGENT_ENTRY_DRS_0]]
; DRCHECK:       bb27.divergent.entry.drs.0:
; DRCHECK-NEXT:    br i1 [[I32_DRS_0]], label [[BB33_DIVERGENT_EXIT_DRS_0:%.*]], label [[BB27_DRS_0]], !llvm.loop [[LOOP28]]
; DRCHECK:       bb33.divergent.exit.drs.0:
; DRCHECK-NEXT:    br label [[BB33_DRS_0:%.*]]
; DRCHECK:       bb33.drs.0:
; DRCHECK-NEXT:    br label [[BB34_DIVERGENT_EXIT_DRS_0]]
; DRCHECK:       bb34.divergent.exit.drs.0:
; DRCHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT_0]], label [[BB34_DIVERGENT_EXIT_DRS_0_OUTRO_0:%.*]] [
; DRCHECK-NEXT:      i32 1, label [[BB34_DIVERGENT_EXIT_DRS_0_OUTRO_1:%.*]]
; DRCHECK-NEXT:      i32 2, label [[BB34_DIVERGENT_EXIT_DRS_0_OUTRO_2:%.*]]
; DRCHECK-NEXT:    ]
; DRCHECK:       bb34.divergent.exit.drs.0.outro.0:
; DRCHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_1]]
; DRCHECK:       bb34.divergent.exit.drs.0.outro.1:
; DRCHECK-NEXT:    br label [[BB21_DIVERGENT_ENTRY_DRS_0_INTRO_2]]
; DRCHECK:       bb34.divergent.exit.drs.0.outro.2:
; DRCHECK-NEXT:    br label [[BB34]]
; DRCHECK:       coarsened.end.check:
; DRCHECK-NEXT:    br i1 [[TMP14]], label [[BB21_EPILOGUE]], label [[BB39:%.*]]
; DRCHECK:       bb21.epilogue:
; DRCHECK-NEXT:    [[I22_EPILOGUE:%.*]] = phi i32 [ [[I37_ADVANCED_ADVANCED]], [[COARSENED_END_CHECK]] ], [ [[INITIAL_IV_COARSENED_2_EPILOGUE:%.*]], [[BB34_EPILOGUE:%.*]] ], [ [[I19]], [[BB17]] ]
; DRCHECK-NEXT:    [[I23_EPILOGUE:%.*]] = phi i32 [ [[TMP13]], [[COARSENED_END_CHECK]] ], [ [[I35_EPILOGUE:%.*]], [[BB34_EPILOGUE]] ], [ [[I14]], [[BB17]] ]
; DRCHECK-NEXT:    [[I24_EPILOGUE:%.*]] = add nsw i32 [[I20]], [[I23_EPILOGUE]]
; DRCHECK-NEXT:    [[I25_EPILOGUE:%.*]] = icmp sgt i32 [[I24_EPILOGUE]], [[I22_EPILOGUE]]
; DRCHECK-NEXT:    br i1 [[I25_EPILOGUE]], label [[BB34_EPILOGUE]], label [[BB26_EPILOGUE:%.*]]
; DRCHECK:       bb26.epilogue:
; DRCHECK-NEXT:    br label [[BB27_EPILOGUE:%.*]]
; DRCHECK:       bb27.epilogue:
; DRCHECK-NEXT:    [[I28_EPILOGUE:%.*]] = phi i32 [ [[I31_EPILOGUE:%.*]], [[BB27_EPILOGUE]] ], [ [[I24_EPILOGUE]], [[BB26_EPILOGUE]] ]
; DRCHECK-NEXT:    [[I29_EPILOGUE:%.*]] = sext i32 [[I28_EPILOGUE]] to i64
; DRCHECK-NEXT:    [[I30_EPILOGUE:%.*]] = getelementptr inbounds float, ptr [[ARG2]], i64 [[I29_EPILOGUE]]
; DRCHECK-NEXT:    store float 1.000000e+00, ptr [[I30_EPILOGUE]], align 4, !tbaa [[TBAA21]], !noalias [[META25]]
; DRCHECK-NEXT:    [[I31_EPILOGUE]] = add nsw i32 [[I28_EPILOGUE]], [[I12]]
; DRCHECK-NEXT:    [[I32_EPILOGUE:%.*]] = icmp sgt i32 [[I31_EPILOGUE]], [[I22_EPILOGUE]]
; DRCHECK-NEXT:    br i1 [[I32_EPILOGUE]], label [[BB33_EPILOGUE:%.*]], label [[BB27_EPILOGUE]], !llvm.loop [[LOOP28]]
; DRCHECK:       bb33.epilogue:
; DRCHECK-NEXT:    br label [[BB34_EPILOGUE]]
; DRCHECK:       bb34.epilogue:
; DRCHECK-NEXT:    fence syncscope("workgroup") seq_cst
; DRCHECK-NEXT:    tail call void @llvm.amdgcn.s.barrier() #[[ATTR7]]
; DRCHECK-NEXT:    [[I35_EPILOGUE]] = add nsw i32 [[I15]], [[I23_EPILOGUE]]
; DRCHECK-NEXT:    [[I36_EPILOGUE:%.*]] = add nsw i32 [[I15]], [[I22_EPILOGUE]]
; DRCHECK-NEXT:    [[INITIAL_IV_COARSENED_2_EPILOGUE]] = tail call i32 @llvm.smin.i32(i32 [[I36_EPILOGUE]], i32 [[I3]])
; DRCHECK-NEXT:    [[I38_EPILOGUE:%.*]] = icmp slt i32 [[I35_EPILOGUE]], [[I]]
; DRCHECK-NEXT:    br i1 [[I38_EPILOGUE]], label [[BB21_EPILOGUE]], label [[BB39]], !llvm.loop [[LOOP34:![0-9]+]]
; DRCHECK:       bb39:
; DRCHECK-NEXT:    br label [[BB40]]
; DRCHECK:       bb40:
; DRCHECK-NEXT:    ret void
;
bb:
  %i = trunc i64 %arg1 to i32
  %i3 = add nsw i32 %i, -1
  %i4 = icmp sgt i32 %i, 0
  br i1 %i4, label %bb5, label %bb40

bb5:                                              ; preds = %bb
  %i6 = tail call i32 @llvm.amdgcn.workgroup.id.x() #4, !range !17
  %i7 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #5
  %i8 = getelementptr inbounds i8, ptr addrspace(4) %i7, i64 4
  %i9 = load i16, ptr addrspace(4) %i8, align 4
  %i10 = getelementptr inbounds i8, ptr addrspace(4) %i7, i64 12
  %i11 = load i32, ptr addrspace(4) %i10, align 4, !invariant.load !18
  %i12 = zext i16 %i9 to i32
  %i13 = udiv i32 %i11, %i12
  %i14 = shl nsw i32 %i6, 8
  %i15 = shl nsw i32 %i13, 8
  %i16 = icmp slt i32 %i14, %i
  br i1 %i16, label %bb17, label %bb40

bb17:                                             ; preds = %bb5
  %i18 = or disjoint i32 %i14, 255
  %i19 = tail call i32 @llvm.smin.i32(i32 %i18, i32 %i3), !range !19
  %i20 = tail call i32 @llvm.amdgcn.workitem.id.x() #6, !range !20, !noundef !18
  br label %bb21

bb21:                                             ; preds = %bb34, %bb17
  %i22 = phi i32 [ %i19, %bb17 ], [ %i37, %bb34 ]
  %i23 = phi i32 [ %i14, %bb17 ], [ %i35, %bb34 ]
  %i24 = add nsw i32 %i20, %i23
  %i25 = icmp sgt i32 %i24, %i22
  br i1 %i25, label %bb34, label %bb26

bb26:                                             ; preds = %bb21
  br label %bb27

bb27:                                             ; preds = %bb27, %bb26
  %i28 = phi i32 [ %i31, %bb27 ], [ %i24, %bb26 ]
  %i29 = sext i32 %i28 to i64
  %i30 = getelementptr inbounds float, ptr %arg2, i64 %i29
  store float 1.000000e+00, ptr %i30, align 4, !tbaa !21, !noalias !25
  %i31 = add nsw i32 %i28, %i12
  %i32 = icmp sgt i32 %i31, %i22
  br i1 %i32, label %bb33, label %bb27, !llvm.loop !28

bb33:                                             ; preds = %bb27
  br label %bb34

bb34:                                             ; preds = %bb33, %bb21
  fence syncscope("workgroup") seq_cst
  tail call void @llvm.amdgcn.s.barrier() #7
  %i35 = add nsw i32 %i15, %i23
  %i36 = add nsw i32 %i15, %i22
  %i37 = tail call i32 @llvm.smin.i32(i32 %i36, i32 %i3)
  %i38 = icmp slt i32 %i35, %i
  br i1 %i38, label %bb21, label %bb39, !llvm.loop !31

bb39:                                             ; preds = %bb34
  br label %bb40

bb40:                                             ; preds = %bb39, %bb5, %bb
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p5(i64 immarg, ptr addrspace(5) nocapture) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.assign(metadata, metadata, metadata, metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p5(i64 immarg, ptr addrspace(5) nocapture) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #1

; Function Attrs: convergent nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.x() #1

attributes #0 = { alwaysinline norecurse nounwind "kernel" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" "uniform-work-group-size"="true" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { convergent nocallback nofree nounwind willreturn }
attributes #4 = { nofree nosync willreturn "llvm.assume"="ompx_no_call_asm" }
attributes #5 = { nosync "llvm.assume"="ompx_no_call_asm" }
attributes #6 = { nofree willreturn "llvm.assume"="ompx_no_call_asm" }
attributes #7 = { "llvm.assume"="ompx_no_call_asm,ompx_aligned_barrier" }

!omp_offload.info = !{!0}
!nvvm.annotations = !{!1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3, !4, !5}
!llvm.module.flags = !{!6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16}

!0 = !{i32 0, i32 88, i32 35617784, !"_Z6concatIfEvPKT_S2_PS0_iiii", i32 23, i32 0, i32 0}
!1 = !{ptr @__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23, !"kernel", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 18.0.0git (git@github.com:ivanradanov/llvm-project2.git 5b69681bd88dadcba694fe6c34f5b76b7abafa22)"}
!4 = !{!"AMD clang version 17.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.7.0 23352 d1e13c532a947d0cbfc94759c00dcf152294aa13)"}
!5 = !{!"clang version 18.0.0git (git@github.com:ivanradanov/llvm-project2.git 90ca8f09d813ba44fbd951f92117c98eed1de004)"}
!6 = !{i32 1, !"amdgpu_code_object_version", i32 400}
!7 = !{i32 7, !"Dwarf Version", i32 5}
!8 = !{i32 2, !"Debug Info Version", i32 3}
!9 = !{i32 1, !"wchar_size", i32 4}
!10 = !{i32 7, !"openmp", i32 51}
!11 = !{i32 7, !"openmp-device", i32 51}
!12 = !{i32 8, !"PIC Level", i32 2}
!13 = !{i32 4, !"amdgpu_hostcall", i32 1}
!14 = !{i32 7, !"debug-info-assignment-tracking", i1 true}
!15 = !{i32 1, !"ThinLTO", i32 0}
!16 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!17 = !{i32 0, i32 -1}
!18 = !{}
!19 = !{i32 -2147483648, i32 2147483647}
!20 = !{i32 0, i32 1024}
!21 = !{!22, !22, i64 0}
!22 = !{!"float", !23, i64 0}
!23 = !{!"omnipotent char", !24, i64 0}
!24 = !{!"Simple C++ TBAA"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23_debug___omp_outlined_debug___omp_outlined_debug__: %.global_tid."}
!27 = distinct !{!27, !"__omp_offloading_58_21f7bf8__Z6concatIfEvPKT_S2_PS0_iiii_l23_debug___omp_outlined_debug___omp_outlined_debug__"}
!28 = distinct !{!28, !29, !30}
!29 = !{!"llvm.loop.unroll.disable"}
!30 = !{!"llvm.loop.unroll_and_interleave.disable"}
!31 = distinct !{!31, !32, !34, !35}
!32 = !{!"llvm.loop.parallel_accesses", !33}
!33 = distinct !{}
!34 = !{!"llvm.loop.unroll_and_interleave.count", i32 3}
!35 = !{!"llvm.loop.unroll_and_interleave.level", i32 0}
