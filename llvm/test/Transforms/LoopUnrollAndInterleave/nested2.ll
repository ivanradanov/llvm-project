; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=loop-unroll-and-interleave %s -S --luai-factor=2 | FileCheck %s
; RUN: opt -passes=loop-unroll-and-interleave %s -S --luai-factor=2 --luai-use-dynamic-convergence=1 | FileCheck %s --check-prefix=DRCHECK

; void vecadd(int *a, int size) {
; #pragma omp target teams distribute parallel for map(tofrom: a[0:size]) //schedule(static, 4)
;   for (unsigned long i = 0; i < size; i++) {
;     if (test1(i)) {
;       use1(a);
;       if (test2(i)) {
;         use2(a);
;         if (test3(i)) {
;           use3(a);
;         }
;       }
;     }
;   }
; }

target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8"
target triple = "amdgcn-amd-amdhsa"

%struct.ident_t = type { i32, i32, i32, i32, ptr }
%struct.DynamicEnvironmentTy = type { i16 }
%struct.KernelEnvironmentTy = type { %struct.ConfigurationEnvironmentTy, ptr, ptr }
%struct.ConfigurationEnvironmentTy = type { i8, i8, i8 }

@__omp_rtl_debug_kind = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_teams_oversubscription = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_threads_oversubscription = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_no_thread_state = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_no_nested_parallelism = weak_odr hidden local_unnamed_addr addrspace(1) constant i32 0
@anon.d45745454ee1a14b8e2bf5af923cbb9b.0 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@anon.d45745454ee1a14b8e2bf5af923cbb9b.1 = private unnamed_addr addrspace(1) constant %struct.ident_t { i32 0, i32 2, i32 0, i32 22, ptr @anon.d45745454ee1a14b8e2bf5af923cbb9b.0 }, align 8
@__omp_offloading_4e_5cb4cb97__Z6vecaddPii_l17_dynamic_environment = weak_odr protected addrspace(1) global %struct.DynamicEnvironmentTy zeroinitializer
@__omp_offloading_4e_5cb4cb97__Z6vecaddPii_l17_kernel_environment = weak_odr protected addrspace(1) constant %struct.KernelEnvironmentTy { %struct.ConfigurationEnvironmentTy { i8 0, i8 1, i8 2 }, ptr addrspacecast (ptr addrspace(1) @anon.d45745454ee1a14b8e2bf5af923cbb9b.1 to ptr), ptr addrspacecast (ptr addrspace(1) @__omp_offloading_4e_5cb4cb97__Z6vecaddPii_l17_dynamic_environment to ptr) }
@anon.d45745454ee1a14b8e2bf5af923cbb9b.2 = private unnamed_addr addrspace(1) constant %struct.ident_t { i32 0, i32 2050, i32 0, i32 22, ptr @anon.d45745454ee1a14b8e2bf5af923cbb9b.0 }, align 8
@anon.d45745454ee1a14b8e2bf5af923cbb9b.3 = private unnamed_addr addrspace(1) constant %struct.ident_t { i32 0, i32 514, i32 0, i32 22, ptr @anon.d45745454ee1a14b8e2bf5af923cbb9b.0 }, align 8
@llvm.amdgcn.abi.version = weak_odr hidden local_unnamed_addr addrspace(4) constant i32 400

declare i32 @__kmpc_target_init(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p5(i64 immarg, ptr addrspace(5) nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p5(i64 immarg, ptr addrspace(5) nocapture) #1

; Function Attrs: nounwind
declare void @__kmpc_distribute_static_init_8u(ptr, i32, i32, ptr nocapture nofree, ptr nocapture nofree, ptr nocapture nofree, ptr nocapture nofree, i64, i64) local_unnamed_addr #2

; Function Attrs: alwaysinline convergent norecurse nounwind
define internal void @__omp_offloading_4e_5cb4cb97__Z6vecaddPii_l17_omp_outlined_omp_outlined(ptr noalias nocapture noundef readonly %.global_tid., ptr noalias nocapture readnone %.bound_tid., i64 noundef %.previous.lb., i64 noundef %.previous.ub., i64 noundef %size, ptr noundef %a) #3 {
; CHECK-LABEL: define internal void @__omp_offloading_4e_5cb4cb97__Z6vecaddPii_l17_omp_outlined_omp_outlined(
; CHECK-SAME: ptr noalias nocapture noundef readonly [[DOTGLOBAL_TID_:%.*]], ptr noalias nocapture readnone [[DOTBOUND_TID_:%.*]], i64 noundef [[DOTPREVIOUS_LB_:%.*]], i64 noundef [[DOTPREVIOUS_UB_:%.*]], i64 noundef [[SIZE:%.*]], ptr noundef [[A:%.*]]) #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTOMP_LB:%.*]] = alloca i64, align 8, addrspace(5)
; CHECK-NEXT:    [[DOTOMP_UB:%.*]] = alloca i64, align 8, addrspace(5)
; CHECK-NEXT:    [[DOTOMP_STRIDE:%.*]] = alloca i64, align 8, addrspace(5)
; CHECK-NEXT:    [[DOTOMP_IS_LAST:%.*]] = alloca i32, align 4, addrspace(5)
; CHECK-NEXT:    [[SEXT_MASK:%.*]] = and i64 [[SIZE]], 4294967295
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[SEXT_MASK]], 0
; CHECK-NEXT:    br i1 [[CMP_NOT]], label [[OMP_PRECOND_END:%.*]], label [[OMP_PRECOND_THEN:%.*]]
; CHECK:       omp.precond.then:
; CHECK-NEXT:    [[DOTOMP_STRIDE_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_STRIDE]] to ptr
; CHECK-NEXT:    [[DOTOMP_IS_LAST_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_IS_LAST]] to ptr
; CHECK-NEXT:    [[DOTOMP_UB_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_UB]] to ptr
; CHECK-NEXT:    [[DOTOMP_LB_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_LB]] to ptr
; CHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) [[DOTOMP_LB]]) #[[ATTR1:[0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) [[DOTOMP_UB]]) #[[ATTR1]]
; CHECK-NEXT:    store i64 [[DOTPREVIOUS_LB_]], ptr addrspace(5) [[DOTOMP_LB]], align 8, !tbaa [[TBAA12:![0-9]+]]
; CHECK-NEXT:    store i64 [[DOTPREVIOUS_UB_]], ptr addrspace(5) [[DOTOMP_UB]], align 8, !tbaa [[TBAA12]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) [[DOTOMP_STRIDE]]) #[[ATTR1]]
; CHECK-NEXT:    store i64 1, ptr addrspace(5) [[DOTOMP_STRIDE]], align 8, !tbaa [[TBAA12]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 4, ptr addrspace(5) [[DOTOMP_IS_LAST]]) #[[ATTR1]]
; CHECK-NEXT:    store i32 0, ptr addrspace(5) [[DOTOMP_IS_LAST]], align 4, !tbaa [[TBAA16:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[DOTGLOBAL_TID_]], align 4, !tbaa [[TBAA16]]
; CHECK-NEXT:    call void @__kmpc_for_static_init_8u(ptr addrspacecast (ptr addrspace(1) @anon.d45745454ee1a14b8e2bf5af923cbb9b.3 to ptr), i32 [[TMP0]], i32 33, ptr nocapture nonnull [[DOTOMP_IS_LAST_ASCAST]], ptr nocapture nonnull [[DOTOMP_LB_ASCAST]], ptr nocapture nonnull [[DOTOMP_UB_ASCAST]], ptr nocapture nonnull [[DOTOMP_STRIDE_ASCAST]], i64 1, i64 1) #[[ATTR1]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr addrspace(5) [[DOTOMP_LB]], align 8, !tbaa [[TBAA12]]
; CHECK-NEXT:    [[ADD:%.*]] = add i64 [[DOTPREVIOUS_UB_]], 1
; CHECK-NEXT:    [[CMP425:%.*]] = icmp ult i64 [[TMP1]], [[ADD]]
; CHECK-NEXT:    br i1 [[CMP425]], label [[OMP_INNER_FOR_BODY_LR_PH:%.*]], label [[OMP_LOOP_EXIT:%.*]]
; CHECK:       omp.inner.for.body.lr.ph:
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr addrspace(5) [[DOTOMP_STRIDE]], align 8
; CHECK-NEXT:    [[COARSENED_STEP:%.*]] = mul i64 [[TMP2]], 2
; CHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 1
; CHECK-NEXT:    [[INITIAL_IV_COARSENED_1:%.*]] = add i64 [[TMP1]], [[TMP3]]
; CHECK-NEXT:    [[TMP4:%.*]] = sub i64 [[ADD]], [[TMP1]]
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], [[TMP2]]
; CHECK-NEXT:    [[TMP6:%.*]] = sub i64 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = udiv i64 [[TMP6]], [[TMP2]]
; CHECK-NEXT:    [[TMP8:%.*]] = udiv i64 [[TMP7]], 2
; CHECK-NEXT:    [[TMP9:%.*]] = mul nsw i64 [[TMP8]], 2
; CHECK-NEXT:    [[TMP10:%.*]] = mul nsw i64 [[TMP9]], [[TMP2]]
; CHECK-NEXT:    [[EPILOGUE_START_IV:%.*]] = add i64 [[TMP10]], [[TMP1]]
; CHECK-NEXT:    [[IS_EPILOGUE_START:%.*]] = icmp eq i64 [[TMP1]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    br i1 [[IS_EPILOGUE_START]], label [[OMP_INNER_FOR_BODY_EPILOGUE:%.*]], label [[OMP_INNER_FOR_BODY:%.*]]
; CHECK:       omp.inner.for.body:
; CHECK-NEXT:    [[DOTOMP_IV_026:%.*]] = phi i64 [ [[TMP1]], [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[ADD15:%.*]], [[OMP_INNER_FOR_INC:%.*]] ]
; CHECK-NEXT:    [[DOTOMP_IV_026_COARSENED_1:%.*]] = phi i64 [ [[INITIAL_IV_COARSENED_1]], [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[ADD15_COARSENED_1:%.*]], [[OMP_INNER_FOR_INC]] ]
; CHECK-NEXT:    [[CONV6:%.*]] = trunc i64 [[DOTOMP_IV_026]] to i32
; CHECK-NEXT:    [[CONV6_COARSENED_1:%.*]] = trunc i64 [[DOTOMP_IV_026_COARSENED_1]] to i32
; CHECK-NEXT:    [[CALL:%.*]] = tail call noundef zeroext i1 @_Z5test1i(i32 noundef [[CONV6]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    [[CALL_COARSENED_1:%.*]] = tail call noundef zeroext i1 @_Z5test1i(i32 noundef [[CONV6_COARSENED_1]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0:%.*]]
; CHECK:       omp.inner.for.incepilogue.start.check.original.end.check:
; CHECK-NEXT:    [[ADD15]] = add i64 [[COARSENED_STEP]], [[DOTOMP_IV_026]]
; CHECK-NEXT:    [[ADD15_COARSENED_1]] = add i64 [[COARSENED_STEP]], [[DOTOMP_IV_026_COARSENED_1]]
; CHECK-NEXT:    [[CMP4:%.*]] = icmp ult i64 [[ADD15]], [[ADD]]
; CHECK-NEXT:    [[CMP4_COARSENED_1:%.*]] = icmp ult i64 [[ADD15_COARSENED_1]], [[ADD]]
; CHECK-NEXT:    [[IS_EPILOGUE_START4:%.*]] = icmp eq i64 [[ADD15]], [[EPILOGUE_START_IV]]
; CHECK-NEXT:    br i1 [[CMP4]], label [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK:%.*]], label [[OMP_LOOP_EXIT_LOOPEXIT:%.*]]
; CHECK:       omp.inner.for.incepilogue.start.check:
; CHECK-NEXT:    br i1 [[IS_EPILOGUE_START4]], label [[OMP_INNER_FOR_BODY_EPILOGUE]], label [[OMP_INNER_FOR_INC]]
; CHECK:       omp.inner.for.inc:
; CHECK-NEXT:    br i1 [[CMP4]], label [[OMP_INNER_FOR_BODY]], label [[OMP_LOOP_EXIT_LOOPEXIT]], !llvm.loop [[LOOP18:![0-9]+]]
; CHECK:       if.then.divergent.entry.drs:
; CHECK-NEXT:    br i1 [[CALL8_DRS:%.*]], label [[IF_THEN9_DRS:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS:%.*]]
; CHECK:       if.then9.divergent.entry.drs:
; CHECK-NEXT:    br i1 [[CALL11_DRS:%.*]], label [[IF_THEN12_DRS:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS:%.*]]
; CHECK:       if.then12.drs:
; CHECK-NEXT:    tail call void @_Z4use3Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS]]
; CHECK:       omp.inner.for.inc.divergent.exit.drs.outro.0:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1:%.*]]
; CHECK:       omp.inner.for.inc.divergent.exit.drs.outro.1:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK_ORIGINAL_END_CHECK:%.*]]
; CHECK:       omp.inner.for.inc.csplit.drs:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS]]
; CHECK:       omp.inner.for.inc.csplit1.drs:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS:%.*]]
; CHECK:       omp.inner.for.body.divergent.entry.drs.intro.0:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS:%.*]]
; CHECK:       omp.inner.for.body.divergent.entry.drs.intro.1:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS]]
; CHECK:       omp.inner.for.body.divergent.entry.drs:
; CHECK-NEXT:    [[DR_COARSENED_IDENT_0:%.*]] = phi i32 [ 0, [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ 1, [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ]
; CHECK-NEXT:    [[CONV6_DRS_REG2MEM_0:%.*]] = phi i32 [ [[CONV6]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ [[CONV6_COARSENED_1]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ]
; CHECK-NEXT:    [[CALL_DRS_REG2MEM_0:%.*]] = phi i1 [ [[CALL]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ [[CALL_COARSENED_1]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ]
; CHECK-NEXT:    br i1 [[CALL_DRS_REG2MEM_0]], label [[IF_THEN_DRS:%.*]], label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS]]
; CHECK:       if.then.drs:
; CHECK-NEXT:    tail call void @_Z4use1Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    [[CALL8_DRS]] = tail call noundef zeroext i1 @_Z5test2i(i32 noundef [[CONV6_DRS_REG2MEM_0]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_THEN_DIVERGENT_ENTRY_DRS:%.*]]
; CHECK:       if.then9.drs:
; CHECK-NEXT:    tail call void @_Z4use2Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    [[CALL11_DRS]] = tail call noundef zeroext i1 @_Z5test3i(i32 noundef [[CONV6_DRS_REG2MEM_0]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_THEN9_DIVERGENT_ENTRY_DRS:%.*]]
; CHECK:       omp.inner.for.inc.divergent.exit.drs:
; CHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT_0]], label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_OUTRO_0:%.*]] [
; CHECK-NEXT:    i32 1, label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_OUTRO_1:%.*]]
; CHECK-NEXT:    ]
; CHECK:       omp.inner.for.inc.csplit.divergent.exit.drs:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT_DRS:%.*]]
; CHECK:       omp.inner.for.inc.csplit1.divergent.exit.drs:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1_DRS:%.*]]
; CHECK:       omp.inner.for.body.epilogue:
; CHECK-NEXT:    [[DOTOMP_IV_026_EPILOGUE:%.*]] = phi i64 [ [[ADD15]], [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK]] ], [ [[ADD15_EPILOGUE:%.*]], [[OMP_INNER_FOR_INC_EPILOGUE:%.*]] ], [ [[TMP1]], [[OMP_INNER_FOR_BODY_LR_PH]] ]
; CHECK-NEXT:    [[CONV6_EPILOGUE:%.*]] = trunc i64 [[DOTOMP_IV_026_EPILOGUE]] to i32
; CHECK-NEXT:    [[CALL_EPILOGUE:%.*]] = tail call noundef zeroext i1 @_Z5test1i(i32 noundef [[CONV6_EPILOGUE]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_EPILOGUE:%.*]]
; CHECK:       if.then.divergent.entry.epilogue:
; CHECK-NEXT:    br i1 [[CALL8_EPILOGUE:%.*]], label [[IF_THEN9_EPILOGUE:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_EPILOGUE:%.*]]
; CHECK:       if.then9.divergent.entry.epilogue:
; CHECK-NEXT:    br i1 [[CALL11_EPILOGUE:%.*]], label [[IF_THEN12_EPILOGUE:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_EPILOGUE:%.*]]
; CHECK:       if.then12.epilogue:
; CHECK-NEXT:    tail call void @_Z4use3Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_EPILOGUE]]
; CHECK:       omp.inner.for.inc.epilogue:
; CHECK-NEXT:    [[ADD15_EPILOGUE]] = add i64 [[TMP2]], [[DOTOMP_IV_026_EPILOGUE]]
; CHECK-NEXT:    [[CMP4_EPILOGUE:%.*]] = icmp ult i64 [[ADD15_EPILOGUE]], [[ADD]]
; CHECK-NEXT:    br i1 [[CMP4_EPILOGUE]], label [[OMP_INNER_FOR_BODY_EPILOGUE]], label [[OMP_LOOP_EXIT_LOOPEXIT]]
; CHECK:       omp.inner.for.inc.csplit.epilogue:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_EPILOGUE]]
; CHECK:       omp.inner.for.inc.csplit1.epilogue:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_EPILOGUE:%.*]]
; CHECK:       omp.inner.for.body.divergent.entry.epilogue:
; CHECK-NEXT:    br i1 [[CALL_EPILOGUE]], label [[IF_THEN_EPILOGUE:%.*]], label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_EPILOGUE]]
; CHECK:       if.then.epilogue:
; CHECK-NEXT:    tail call void @_Z4use1Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    [[CALL8_EPILOGUE]] = tail call noundef zeroext i1 @_Z5test2i(i32 noundef [[CONV6_EPILOGUE]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_THEN_DIVERGENT_ENTRY_EPILOGUE:%.*]]
; CHECK:       if.then9.epilogue:
; CHECK-NEXT:    tail call void @_Z4use2Pi(ptr noundef [[A]]) #[[ATTR6]]
; CHECK-NEXT:    [[CALL11_EPILOGUE]] = tail call noundef zeroext i1 @_Z5test3i(i32 noundef [[CONV6_EPILOGUE]]) #[[ATTR6]]
; CHECK-NEXT:    br label [[IF_THEN9_DIVERGENT_ENTRY_EPILOGUE:%.*]]
; CHECK:       omp.inner.for.inc.divergent.exit.epilogue:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_EPILOGUE]]
; CHECK:       omp.inner.for.inc.csplit.divergent.exit.epilogue:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT_EPILOGUE:%.*]]
; CHECK:       omp.inner.for.inc.csplit1.divergent.exit.epilogue:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1_EPILOGUE:%.*]]
; CHECK:       omp.loop.exit.loopexit:
; CHECK-NEXT:    br label [[OMP_LOOP_EXIT]]
; CHECK:       omp.loop.exit:
; CHECK-NEXT:    tail call void @__kmpc_distribute_static_fini(ptr addrspacecast (ptr addrspace(1) @anon.d45745454ee1a14b8e2bf5af923cbb9b.2 to ptr), i32 [[TMP0]]) #[[ATTR1]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 4, ptr addrspace(5) [[DOTOMP_IS_LAST]]) #[[ATTR1]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) [[DOTOMP_STRIDE]]) #[[ATTR1]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) [[DOTOMP_UB]]) #[[ATTR1]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) [[DOTOMP_LB]]) #[[ATTR1]]
; CHECK-NEXT:    br label [[OMP_PRECOND_END]]
; CHECK:       omp.precond.end:
; CHECK-NEXT:    ret void
;
; DRCHECK-LABEL: define internal void @__omp_offloading_4e_5cb4cb97__Z6vecaddPii_l17_omp_outlined_omp_outlined(
; DRCHECK-SAME: ptr noalias nocapture noundef readonly [[DOTGLOBAL_TID_:%.*]], ptr noalias nocapture readnone [[DOTBOUND_TID_:%.*]], i64 noundef [[DOTPREVIOUS_LB_:%.*]], i64 noundef [[DOTPREVIOUS_UB_:%.*]], i64 noundef [[SIZE:%.*]], ptr noundef [[A:%.*]]) #[[ATTR2:[0-9]+]] {
; DRCHECK-NEXT:  entry:
; DRCHECK-NEXT:    [[DOTOMP_LB:%.*]] = alloca i64, align 8, addrspace(5)
; DRCHECK-NEXT:    [[DOTOMP_UB:%.*]] = alloca i64, align 8, addrspace(5)
; DRCHECK-NEXT:    [[DOTOMP_STRIDE:%.*]] = alloca i64, align 8, addrspace(5)
; DRCHECK-NEXT:    [[DOTOMP_IS_LAST:%.*]] = alloca i32, align 4, addrspace(5)
; DRCHECK-NEXT:    [[SEXT_MASK:%.*]] = and i64 [[SIZE]], 4294967295
; DRCHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[SEXT_MASK]], 0
; DRCHECK-NEXT:    br i1 [[CMP_NOT]], label [[OMP_PRECOND_END:%.*]], label [[OMP_PRECOND_THEN:%.*]]
; DRCHECK:       omp.precond.then:
; DRCHECK-NEXT:    [[DOTOMP_STRIDE_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_STRIDE]] to ptr
; DRCHECK-NEXT:    [[DOTOMP_IS_LAST_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_IS_LAST]] to ptr
; DRCHECK-NEXT:    [[DOTOMP_UB_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_UB]] to ptr
; DRCHECK-NEXT:    [[DOTOMP_LB_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTOMP_LB]] to ptr
; DRCHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) [[DOTOMP_LB]]) #[[ATTR1:[0-9]+]]
; DRCHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) [[DOTOMP_UB]]) #[[ATTR1]]
; DRCHECK-NEXT:    store i64 [[DOTPREVIOUS_LB_]], ptr addrspace(5) [[DOTOMP_LB]], align 8, !tbaa [[TBAA12:![0-9]+]]
; DRCHECK-NEXT:    store i64 [[DOTPREVIOUS_UB_]], ptr addrspace(5) [[DOTOMP_UB]], align 8, !tbaa [[TBAA12]]
; DRCHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) [[DOTOMP_STRIDE]]) #[[ATTR1]]
; DRCHECK-NEXT:    store i64 1, ptr addrspace(5) [[DOTOMP_STRIDE]], align 8, !tbaa [[TBAA12]]
; DRCHECK-NEXT:    call void @llvm.lifetime.start.p5(i64 4, ptr addrspace(5) [[DOTOMP_IS_LAST]]) #[[ATTR1]]
; DRCHECK-NEXT:    store i32 0, ptr addrspace(5) [[DOTOMP_IS_LAST]], align 4, !tbaa [[TBAA16:![0-9]+]]
; DRCHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[DOTGLOBAL_TID_]], align 4, !tbaa [[TBAA16]]
; DRCHECK-NEXT:    call void @__kmpc_for_static_init_8u(ptr addrspacecast (ptr addrspace(1) @anon.d45745454ee1a14b8e2bf5af923cbb9b.3 to ptr), i32 [[TMP0]], i32 33, ptr nocapture nonnull [[DOTOMP_IS_LAST_ASCAST]], ptr nocapture nonnull [[DOTOMP_LB_ASCAST]], ptr nocapture nonnull [[DOTOMP_UB_ASCAST]], ptr nocapture nonnull [[DOTOMP_STRIDE_ASCAST]], i64 1, i64 1) #[[ATTR1]]
; DRCHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr addrspace(5) [[DOTOMP_LB]], align 8, !tbaa [[TBAA12]]
; DRCHECK-NEXT:    [[ADD:%.*]] = add i64 [[DOTPREVIOUS_UB_]], 1
; DRCHECK-NEXT:    [[CMP425:%.*]] = icmp ult i64 [[TMP1]], [[ADD]]
; DRCHECK-NEXT:    br i1 [[CMP425]], label [[OMP_INNER_FOR_BODY_LR_PH:%.*]], label [[OMP_LOOP_EXIT:%.*]]
; DRCHECK:       omp.inner.for.body.lr.ph:
; DRCHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr addrspace(5) [[DOTOMP_STRIDE]], align 8
; DRCHECK-NEXT:    [[COARSENED_STEP:%.*]] = mul i64 [[TMP2]], 2
; DRCHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 1
; DRCHECK-NEXT:    [[INITIAL_IV_COARSENED_1:%.*]] = add i64 [[TMP1]], [[TMP3]]
; DRCHECK-NEXT:    [[TMP4:%.*]] = sub i64 [[ADD]], [[TMP1]]
; DRCHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], [[TMP2]]
; DRCHECK-NEXT:    [[TMP6:%.*]] = sub i64 [[TMP5]], 1
; DRCHECK-NEXT:    [[TMP7:%.*]] = udiv i64 [[TMP6]], [[TMP2]]
; DRCHECK-NEXT:    [[TMP8:%.*]] = udiv i64 [[TMP7]], 2
; DRCHECK-NEXT:    [[TMP9:%.*]] = mul nsw i64 [[TMP8]], 2
; DRCHECK-NEXT:    [[TMP10:%.*]] = mul nsw i64 [[TMP9]], [[TMP2]]
; DRCHECK-NEXT:    [[EPILOGUE_START_IV:%.*]] = add i64 [[TMP10]], [[TMP1]]
; DRCHECK-NEXT:    [[IS_EPILOGUE_START:%.*]] = icmp eq i64 [[TMP1]], [[EPILOGUE_START_IV]]
; DRCHECK-NEXT:    br i1 [[IS_EPILOGUE_START]], label [[OMP_INNER_FOR_BODY_EPILOGUE:%.*]], label [[OMP_INNER_FOR_BODY:%.*]]
; DRCHECK:       omp.inner.for.body:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_0:%.*]] = phi i32 [ undef, [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[DR_COARSENED_IDENT4_5:%.*]], [[OMP_INNER_FOR_INC:%.*]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_0:%.*]] = phi i32 [ undef, [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[DR_COARSENED_IDENT_5:%.*]], [[OMP_INNER_FOR_INC]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_0:%.*]] = phi i1 [ undef, [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[CALL11_COARSENED_1_DRSTASH_5:%.*]], [[OMP_INNER_FOR_INC]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_0:%.*]] = phi i32 [ undef, [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[CONV6_COARSENED_1_DRSTASH_5:%.*]], [[OMP_INNER_FOR_INC]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_0:%.*]] = phi i1 [ undef, [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[CALL8_COARSENED_1_DRSTASH_5:%.*]], [[OMP_INNER_FOR_INC]] ]
; DRCHECK-NEXT:    [[DOTOMP_IV_026:%.*]] = phi i64 [ [[TMP1]], [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[ADD15:%.*]], [[OMP_INNER_FOR_INC]] ]
; DRCHECK-NEXT:    [[DOTOMP_IV_026_COARSENED_1:%.*]] = phi i64 [ [[INITIAL_IV_COARSENED_1]], [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[ADD15_COARSENED_1:%.*]], [[OMP_INNER_FOR_INC]] ]
; DRCHECK-NEXT:    [[CONV6:%.*]] = trunc i64 [[DOTOMP_IV_026]] to i32
; DRCHECK-NEXT:    [[CONV6_COARSENED_1:%.*]] = trunc i64 [[DOTOMP_IV_026_COARSENED_1]] to i32
; DRCHECK-NEXT:    [[CALL:%.*]] = tail call noundef zeroext i1 @_Z5test1i(i32 noundef [[CONV6]]) #[[ATTR6:[0-9]+]]
; DRCHECK-NEXT:    [[CALL_COARSENED_1:%.*]] = tail call noundef zeroext i1 @_Z5test1i(i32 noundef [[CONV6_COARSENED_1]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[TMP11:%.*]] = icmp eq i1 [[CALL_COARSENED_1]], [[CALL]]
; DRCHECK-NEXT:    [[TMP12:%.*]] = and i1 [[TMP11]], true
; DRCHECK-NEXT:    br i1 [[TMP12]], label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY:%.*]], label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0:%.*]]
; DRCHECK:       omp.inner.for.body.divergent.entry:
; DRCHECK-NEXT:    br i1 [[CALL]], label [[IF_THEN:%.*]], label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT:%.*]]
; DRCHECK:       if.then:
; DRCHECK-NEXT:    tail call void @_Z4use1Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    tail call void @_Z4use1Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[CALL8:%.*]] = tail call noundef zeroext i1 @_Z5test2i(i32 noundef [[CONV6]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1:%.*]] = tail call noundef zeroext i1 @_Z5test2i(i32 noundef [[CONV6_COARSENED_1]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[TMP13:%.*]] = icmp eq i1 [[CALL8_COARSENED_1]], [[CALL8]]
; DRCHECK-NEXT:    [[TMP14:%.*]] = and i1 [[TMP13]], true
; DRCHECK-NEXT:    br i1 [[TMP14]], label [[IF_THEN_DIVERGENT_ENTRY:%.*]], label [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_0:%.*]]
; DRCHECK:       if.then.divergent.entry:
; DRCHECK-NEXT:    br i1 [[CALL8]], label [[IF_THEN9:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT:%.*]]
; DRCHECK:       if.then9:
; DRCHECK-NEXT:    tail call void @_Z4use2Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    tail call void @_Z4use2Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[CALL11:%.*]] = tail call noundef zeroext i1 @_Z5test3i(i32 noundef [[CONV6]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1:%.*]] = tail call noundef zeroext i1 @_Z5test3i(i32 noundef [[CONV6_COARSENED_1]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[TMP15:%.*]] = icmp eq i1 [[CALL11_COARSENED_1]], [[CALL11]]
; DRCHECK-NEXT:    [[TMP16:%.*]] = and i1 [[TMP15]], true
; DRCHECK-NEXT:    br i1 [[TMP16]], label [[IF_THEN9_DIVERGENT_ENTRY:%.*]], label [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_0:%.*]]
; DRCHECK:       if.then9.divergent.entry:
; DRCHECK-NEXT:    br i1 [[CALL11]], label [[IF_THEN12:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT:%.*]]
; DRCHECK:       if.then12:
; DRCHECK-NEXT:    tail call void @_Z4use3Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    tail call void @_Z4use3Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT]]
; DRCHECK:       omp.inner.for.inc.csplit.divergent.exit:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT:%.*]]
; DRCHECK:       omp.inner.for.inc.csplit:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_1:%.*]] = phi i32 [ [[DR_COARSENED_IDENT4_0]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT]] ], [ [[DR_COARSENED_IDENT4_7:%.*]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS_OUTRO_1:%.*]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_1:%.*]] = phi i32 [ [[DR_COARSENED_IDENT_0]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT]] ], [ [[DR_COARSENED_IDENT_7:%.*]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_1:%.*]] = phi i1 [ [[CALL11_COARSENED_1_DRSTASH_0]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT]] ], [ [[CALL11_COARSENED_1_DRSTASH_7:%.*]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_1:%.*]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_0]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT]] ], [ [[CONV6_COARSENED_1_DRSTASH_7:%.*]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_1:%.*]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_0]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT]] ], [ [[CALL8_COARSENED_1_DRSTASH_7:%.*]], [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT]]
; DRCHECK:       omp.inner.for.inc.csplit1.divergent.exit:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_2:%.*]] = phi i32 [ [[DR_COARSENED_IDENT4_1]], [[OMP_INNER_FOR_INC_CSPLIT]] ], [ [[DR_COARSENED_IDENT4_0]], [[IF_THEN_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_2:%.*]] = phi i32 [ [[DR_COARSENED_IDENT_1]], [[OMP_INNER_FOR_INC_CSPLIT]] ], [ [[DR_COARSENED_IDENT_0]], [[IF_THEN_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_2:%.*]] = phi i1 [ [[CALL11_COARSENED_1_DRSTASH_1]], [[OMP_INNER_FOR_INC_CSPLIT]] ], [ [[CALL11_COARSENED_1_DRSTASH_0]], [[IF_THEN_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_2:%.*]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_1]], [[OMP_INNER_FOR_INC_CSPLIT]] ], [ [[CONV6_COARSENED_1_DRSTASH_0]], [[IF_THEN_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_2:%.*]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_1]], [[OMP_INNER_FOR_INC_CSPLIT]] ], [ [[CALL8_COARSENED_1_DRSTASH_0]], [[IF_THEN_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1:%.*]]
; DRCHECK:       omp.inner.for.inc.csplit1:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_3:%.*]] = phi i32 [ [[DR_COARSENED_IDENT4_2]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT]] ], [ [[DR_COARSENED_IDENT4_10:%.*]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS_OUTRO_1:%.*]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_3:%.*]] = phi i32 [ [[DR_COARSENED_IDENT_2]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT]] ], [ [[DR_COARSENED_IDENT_10:%.*]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_3:%.*]] = phi i1 [ [[CALL11_COARSENED_1_DRSTASH_2]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT]] ], [ [[CALL11_COARSENED_1_DRSTASH_10:%.*]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_3:%.*]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_2]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT]] ], [ [[CONV6_COARSENED_1_DRSTASH_10:%.*]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_3:%.*]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_2]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT]] ], [ [[CALL8_COARSENED_1_DRSTASH_10:%.*]], [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT]]
; DRCHECK:       omp.inner.for.inc.divergent.exit:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_4:%.*]] = phi i32 [ [[DR_COARSENED_IDENT4_3]], [[OMP_INNER_FOR_INC_CSPLIT1]] ], [ [[DR_COARSENED_IDENT4_0]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_4:%.*]] = phi i32 [ [[DR_COARSENED_IDENT_3]], [[OMP_INNER_FOR_INC_CSPLIT1]] ], [ [[DR_COARSENED_IDENT_0]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_4:%.*]] = phi i1 [ [[CALL11_COARSENED_1_DRSTASH_3]], [[OMP_INNER_FOR_INC_CSPLIT1]] ], [ [[CALL11_COARSENED_1_DRSTASH_0]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_4:%.*]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_3]], [[OMP_INNER_FOR_INC_CSPLIT1]] ], [ [[CONV6_COARSENED_1_DRSTASH_0]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_4:%.*]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_3]], [[OMP_INNER_FOR_INC_CSPLIT1]] ], [ [[CALL8_COARSENED_1_DRSTASH_0]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY]] ]
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK_ORIGINAL_END_CHECK:%.*]]
; DRCHECK:       omp.inner.for.incepilogue.start.check.original.end.check:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_5]] = phi i32 [ [[DR_COARSENED_IDENT4_4]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT]] ], [ [[DR_COARSENED_IDENT4_9:%.*]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_OUTRO_1:%.*]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_5]] = phi i32 [ [[DR_COARSENED_IDENT_4]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT]] ], [ [[DR_COARSENED_IDENT_9:%.*]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_5]] = phi i1 [ [[CALL11_COARSENED_1_DRSTASH_4]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT]] ], [ [[CALL11_COARSENED_1_DRSTASH_9:%.*]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_5]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_4]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT]] ], [ [[CONV6_COARSENED_1_DRSTASH_9:%.*]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_5]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_4]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT]] ], [ [[CALL8_COARSENED_1_DRSTASH_9:%.*]], [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_OUTRO_1]] ]
; DRCHECK-NEXT:    [[ADD15]] = add i64 [[COARSENED_STEP]], [[DOTOMP_IV_026]]
; DRCHECK-NEXT:    [[ADD15_COARSENED_1]] = add i64 [[COARSENED_STEP]], [[DOTOMP_IV_026_COARSENED_1]]
; DRCHECK-NEXT:    [[CMP4:%.*]] = icmp ult i64 [[ADD15]], [[ADD]]
; DRCHECK-NEXT:    [[CMP4_COARSENED_1:%.*]] = icmp ult i64 [[ADD15_COARSENED_1]], [[ADD]]
; DRCHECK-NEXT:    [[IS_EPILOGUE_START8:%.*]] = icmp eq i64 [[ADD15]], [[EPILOGUE_START_IV]]
; DRCHECK-NEXT:    br i1 [[CMP4]], label [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK:%.*]], label [[OMP_LOOP_EXIT_LOOPEXIT:%.*]]
; DRCHECK:       omp.inner.for.incepilogue.start.check:
; DRCHECK-NEXT:    br i1 [[IS_EPILOGUE_START8]], label [[OMP_INNER_FOR_BODY_EPILOGUE]], label [[OMP_INNER_FOR_INC]]
; DRCHECK:       omp.inner.for.inc:
; DRCHECK-NEXT:    br i1 [[CMP4]], label [[OMP_INNER_FOR_BODY]], label [[OMP_LOOP_EXIT_LOOPEXIT]], !llvm.loop [[LOOP18:![0-9]+]]
; DRCHECK:       if.then.divergent.entry.drs.intro.0:
; DRCHECK-NEXT:    br label [[IF_THEN_DIVERGENT_ENTRY_DRS:%.*]]
; DRCHECK:       if.then.divergent.entry.drs.intro.1:
; DRCHECK-NEXT:    br label [[IF_THEN_DIVERGENT_ENTRY_DRS]]
; DRCHECK:       if.then.divergent.entry.drs.intro.nested:
; DRCHECK-NEXT:    br label [[IF_THEN_DIVERGENT_ENTRY_DRS]]
; DRCHECK:       if.then.divergent.entry.drs:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_6:%.*]] = phi i32 [ 1, [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_1:%.*]] ], [ -1, [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_NESTED:%.*]] ], [ 0, [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_6:%.*]] = phi i32 [ [[DR_COARSENED_IDENT_10]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[DR_COARSENED_IDENT_8:%.*]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ], [ [[DR_COARSENED_IDENT_0]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CONV6_DRS_REG2MEM_0:%.*]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_10]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ poison, [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ], [ [[CONV6]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CALL8_DRS_REG2MEM_0:%.*]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_10]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CALL8_DRS:%.*]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ], [ [[CALL8]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_6:%.*]] = phi i1 [ [[CALL11_COARSENED_1_DRSTASH_10]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CALL11_COARSENED_1_DRSTASH_8:%.*]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ], [ [[CALL11_COARSENED_1_DRSTASH_0]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_6:%.*]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_10]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CONV6_COARSENED_1_DRSTASH_8:%.*]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ], [ [[CONV6_COARSENED_1]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_6:%.*]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_10]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CALL8_COARSENED_1_DRSTASH_8:%.*]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ], [ [[CALL8_COARSENED_1]], [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    br i1 [[CALL8_DRS_REG2MEM_0]], label [[IF_THEN9_DRS:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS:%.*]]
; DRCHECK:       if.then9.divergent.entry.drs.intro.0:
; DRCHECK-NEXT:    br label [[IF_THEN9_DIVERGENT_ENTRY_DRS:%.*]]
; DRCHECK:       if.then9.divergent.entry.drs.intro.1:
; DRCHECK-NEXT:    br label [[IF_THEN9_DIVERGENT_ENTRY_DRS]]
; DRCHECK:       if.then9.divergent.entry.drs.intro.nested:
; DRCHECK-NEXT:    br label [[IF_THEN9_DIVERGENT_ENTRY_DRS]]
; DRCHECK:       if.then9.divergent.entry.drs:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT6_0:%.*]] = phi i32 [ 0, [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ 1, [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_1:%.*]] ], [ -1, [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_NESTED:%.*]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_7]] = phi i32 [ [[DR_COARSENED_IDENT4_0]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ [[DR_COARSENED_IDENT4_7]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[DR_COARSENED_IDENT4_6]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_7]] = phi i32 [ [[DR_COARSENED_IDENT_0]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ [[DR_COARSENED_IDENT_7]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[DR_COARSENED_IDENT_6]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ]
; DRCHECK-NEXT:    [[CALL11_DRS_REG2MEM_0:%.*]] = phi i1 [ [[CALL11]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ [[CALL11_COARSENED_1_DRSTASH_7]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CALL11_DRS:%.*]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_7]] = phi i1 [ [[CALL11_COARSENED_1]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ [[CALL11_COARSENED_1_DRSTASH_7]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CALL11_COARSENED_1_DRSTASH_6]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_7]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_0]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ [[CONV6_COARSENED_1_DRSTASH_7]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CONV6_COARSENED_1_DRSTASH_6]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_7]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_0]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_0]] ], [ [[CALL8_COARSENED_1_DRSTASH_7]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CALL8_COARSENED_1_DRSTASH_6]], [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_NESTED]] ]
; DRCHECK-NEXT:    br i1 [[CALL11_DRS_REG2MEM_0]], label [[IF_THEN12_DRS:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS:%.*]]
; DRCHECK:       if.then12.drs:
; DRCHECK-NEXT:    tail call void @_Z4use3Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS]]
; DRCHECK:       omp.inner.for.inc.divergent.exit.drs.outro.0:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1:%.*]]
; DRCHECK:       omp.inner.for.inc.divergent.exit.drs.outro.1:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK_ORIGINAL_END_CHECK]]
; DRCHECK:       omp.inner.for.inc.csplit.divergent.exit.drs.outro.0:
; DRCHECK-NEXT:    br label [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_1]]
; DRCHECK:       omp.inner.for.inc.csplit.divergent.exit.drs.outro.1:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT]]
; DRCHECK:       omp.inner.for.inc.csplit.divergent.exit.drs.outro.nested:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT_DRS:%.*]]
; DRCHECK:       omp.inner.for.inc.csplit.drs:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS]]
; DRCHECK:       omp.inner.for.inc.csplit1.divergent.exit.drs.outro.0:
; DRCHECK-NEXT:    br label [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_1]]
; DRCHECK:       omp.inner.for.inc.csplit1.divergent.exit.drs.outro.1:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1]]
; DRCHECK:       omp.inner.for.inc.csplit1.divergent.exit.drs.outro.nested:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1_DRS:%.*]]
; DRCHECK:       omp.inner.for.inc.csplit1.drs:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS:%.*]]
; DRCHECK:       omp.inner.for.body.divergent.entry.drs.intro.0:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS:%.*]]
; DRCHECK:       omp.inner.for.body.divergent.entry.drs.intro.1:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS]]
; DRCHECK:       omp.inner.for.body.divergent.entry.drs:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_8:%.*]] = phi i32 [ [[DR_COARSENED_IDENT4_9]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[DR_COARSENED_IDENT4_0]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_8]] = phi i32 [ 1, [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ 0, [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CONV6_DRS_REG2MEM_1:%.*]] = phi i32 [ [[CONV6_COARSENED_1]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CONV6]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CALL_DRS_REG2MEM_0:%.*]] = phi i1 [ [[CALL_COARSENED_1]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CALL]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_8]] = phi i1 [ [[CALL11_COARSENED_1_DRSTASH_9]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CALL11_COARSENED_1_DRSTASH_0]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_8]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_9]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CONV6_COARSENED_1_DRSTASH_0]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_8]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_9]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_1]] ], [ [[CALL8_COARSENED_1_DRSTASH_0]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS_INTRO_0]] ]
; DRCHECK-NEXT:    br i1 [[CALL_DRS_REG2MEM_0]], label [[IF_THEN_DRS:%.*]], label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS]]
; DRCHECK:       if.then.drs:
; DRCHECK-NEXT:    tail call void @_Z4use1Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[CALL8_DRS]] = tail call noundef zeroext i1 @_Z5test2i(i32 noundef [[CONV6_DRS_REG2MEM_1]]) #[[ATTR6]]
; DRCHECK-NEXT:    br label [[IF_THEN_DIVERGENT_ENTRY_DRS_INTRO_NESTED]]
; DRCHECK:       if.then9.drs:
; DRCHECK-NEXT:    tail call void @_Z4use2Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[CALL11_DRS]] = tail call noundef zeroext i1 @_Z5test3i(i32 noundef [[CONV6_DRS_REG2MEM_0]]) #[[ATTR6]]
; DRCHECK-NEXT:    br label [[IF_THEN9_DIVERGENT_ENTRY_DRS_INTRO_NESTED]]
; DRCHECK:       omp.inner.for.inc.divergent.exit.drs:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_9]] = phi i32 [ [[DR_COARSENED_IDENT4_10]], [[OMP_INNER_FOR_INC_CSPLIT1_DRS]] ], [ [[DR_COARSENED_IDENT4_8]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_9]] = phi i32 [ [[DR_COARSENED_IDENT_10]], [[OMP_INNER_FOR_INC_CSPLIT1_DRS]] ], [ [[DR_COARSENED_IDENT_8]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_9]] = phi i1 [ [[CALL11_COARSENED_1_DRSTASH_10]], [[OMP_INNER_FOR_INC_CSPLIT1_DRS]] ], [ [[CALL11_COARSENED_1_DRSTASH_8]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_9]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_10]], [[OMP_INNER_FOR_INC_CSPLIT1_DRS]] ], [ [[CONV6_COARSENED_1_DRSTASH_8]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_9]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_10]], [[OMP_INNER_FOR_INC_CSPLIT1_DRS]] ], [ [[CALL8_COARSENED_1_DRSTASH_8]], [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT_9]], label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_OUTRO_0:%.*]] [
; DRCHECK-NEXT:    i32 1, label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_DRS_OUTRO_1]]
; DRCHECK-NEXT:    ]
; DRCHECK:       omp.inner.for.inc.csplit.divergent.exit.drs:
; DRCHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT6_0]], label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS_OUTRO_0:%.*]] [
; DRCHECK-NEXT:    i32 1, label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS_OUTRO_1]]
; DRCHECK-NEXT:    i32 -1, label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_DRS_OUTRO_NESTED:%.*]]
; DRCHECK-NEXT:    ]
; DRCHECK:       omp.inner.for.inc.csplit1.divergent.exit.drs:
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT4_10]] = phi i32 [ [[DR_COARSENED_IDENT4_7]], [[OMP_INNER_FOR_INC_CSPLIT_DRS]] ], [ [[DR_COARSENED_IDENT4_6]], [[IF_THEN_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    [[DR_COARSENED_IDENT_10]] = phi i32 [ [[DR_COARSENED_IDENT_7]], [[OMP_INNER_FOR_INC_CSPLIT_DRS]] ], [ [[DR_COARSENED_IDENT_6]], [[IF_THEN_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    [[CALL11_COARSENED_1_DRSTASH_10]] = phi i1 [ [[CALL11_COARSENED_1_DRSTASH_7]], [[OMP_INNER_FOR_INC_CSPLIT_DRS]] ], [ [[CALL11_COARSENED_1_DRSTASH_6]], [[IF_THEN_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    [[CONV6_COARSENED_1_DRSTASH_10]] = phi i32 [ [[CONV6_COARSENED_1_DRSTASH_7]], [[OMP_INNER_FOR_INC_CSPLIT_DRS]] ], [ [[CONV6_COARSENED_1_DRSTASH_6]], [[IF_THEN_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    [[CALL8_COARSENED_1_DRSTASH_10]] = phi i1 [ [[CALL8_COARSENED_1_DRSTASH_7]], [[OMP_INNER_FOR_INC_CSPLIT_DRS]] ], [ [[CALL8_COARSENED_1_DRSTASH_6]], [[IF_THEN_DIVERGENT_ENTRY_DRS]] ]
; DRCHECK-NEXT:    switch i32 [[DR_COARSENED_IDENT4_10]], label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS_OUTRO_0:%.*]] [
; DRCHECK-NEXT:    i32 1, label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS_OUTRO_1]]
; DRCHECK-NEXT:    i32 -1, label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_DRS_OUTRO_NESTED:%.*]]
; DRCHECK-NEXT:    ]
; DRCHECK:       omp.inner.for.body.epilogue:
; DRCHECK-NEXT:    [[DOTOMP_IV_026_EPILOGUE:%.*]] = phi i64 [ [[ADD15]], [[OMP_INNER_FOR_INCEPILOGUE_START_CHECK]] ], [ [[ADD15_EPILOGUE:%.*]], [[OMP_INNER_FOR_INC_EPILOGUE:%.*]] ], [ [[TMP1]], [[OMP_INNER_FOR_BODY_LR_PH]] ]
; DRCHECK-NEXT:    [[CONV6_EPILOGUE:%.*]] = trunc i64 [[DOTOMP_IV_026_EPILOGUE]] to i32
; DRCHECK-NEXT:    [[CALL_EPILOGUE:%.*]] = tail call noundef zeroext i1 @_Z5test1i(i32 noundef [[CONV6_EPILOGUE]]) #[[ATTR6]]
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_DIVERGENT_ENTRY_EPILOGUE:%.*]]
; DRCHECK:       if.then.divergent.entry.epilogue:
; DRCHECK-NEXT:    br i1 [[CALL8_EPILOGUE:%.*]], label [[IF_THEN9_EPILOGUE:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_EPILOGUE:%.*]]
; DRCHECK:       if.then9.divergent.entry.epilogue:
; DRCHECK-NEXT:    br i1 [[CALL11_EPILOGUE:%.*]], label [[IF_THEN12_EPILOGUE:%.*]], label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_EPILOGUE:%.*]]
; DRCHECK:       if.then12.epilogue:
; DRCHECK-NEXT:    tail call void @_Z4use3Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT_DIVERGENT_EXIT_EPILOGUE]]
; DRCHECK:       omp.inner.for.inc.epilogue:
; DRCHECK-NEXT:    [[ADD15_EPILOGUE]] = add i64 [[TMP2]], [[DOTOMP_IV_026_EPILOGUE]]
; DRCHECK-NEXT:    [[CMP4_EPILOGUE:%.*]] = icmp ult i64 [[ADD15_EPILOGUE]], [[ADD]]
; DRCHECK-NEXT:    br i1 [[CMP4_EPILOGUE]], label [[OMP_INNER_FOR_BODY_EPILOGUE]], label [[OMP_LOOP_EXIT_LOOPEXIT]]
; DRCHECK:       omp.inner.for.inc.csplit.epilogue:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1_DIVERGENT_EXIT_EPILOGUE]]
; DRCHECK:       omp.inner.for.inc.csplit1.epilogue:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_EPILOGUE:%.*]]
; DRCHECK:       omp.inner.for.body.divergent.entry.epilogue:
; DRCHECK-NEXT:    br i1 [[CALL_EPILOGUE]], label [[IF_THEN_EPILOGUE:%.*]], label [[OMP_INNER_FOR_INC_DIVERGENT_EXIT_EPILOGUE]]
; DRCHECK:       if.then.epilogue:
; DRCHECK-NEXT:    tail call void @_Z4use1Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[CALL8_EPILOGUE]] = tail call noundef zeroext i1 @_Z5test2i(i32 noundef [[CONV6_EPILOGUE]]) #[[ATTR6]]
; DRCHECK-NEXT:    br label [[IF_THEN_DIVERGENT_ENTRY_EPILOGUE:%.*]]
; DRCHECK:       if.then9.epilogue:
; DRCHECK-NEXT:    tail call void @_Z4use2Pi(ptr noundef [[A]]) #[[ATTR6]]
; DRCHECK-NEXT:    [[CALL11_EPILOGUE]] = tail call noundef zeroext i1 @_Z5test3i(i32 noundef [[CONV6_EPILOGUE]]) #[[ATTR6]]
; DRCHECK-NEXT:    br label [[IF_THEN9_DIVERGENT_ENTRY_EPILOGUE:%.*]]
; DRCHECK:       omp.inner.for.inc.divergent.exit.epilogue:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_EPILOGUE]]
; DRCHECK:       omp.inner.for.inc.csplit.divergent.exit.epilogue:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT_EPILOGUE:%.*]]
; DRCHECK:       omp.inner.for.inc.csplit1.divergent.exit.epilogue:
; DRCHECK-NEXT:    br label [[OMP_INNER_FOR_INC_CSPLIT1_EPILOGUE:%.*]]
; DRCHECK:       omp.loop.exit.loopexit:
; DRCHECK-NEXT:    br label [[OMP_LOOP_EXIT]]
; DRCHECK:       omp.loop.exit:
; DRCHECK-NEXT:    tail call void @__kmpc_distribute_static_fini(ptr addrspacecast (ptr addrspace(1) @anon.d45745454ee1a14b8e2bf5af923cbb9b.2 to ptr), i32 [[TMP0]]) #[[ATTR1]]
; DRCHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 4, ptr addrspace(5) [[DOTOMP_IS_LAST]]) #[[ATTR1]]
; DRCHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) [[DOTOMP_STRIDE]]) #[[ATTR1]]
; DRCHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) [[DOTOMP_UB]]) #[[ATTR1]]
; DRCHECK-NEXT:    call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) [[DOTOMP_LB]]) #[[ATTR1]]
; DRCHECK-NEXT:    br label [[OMP_PRECOND_END]]
; DRCHECK:       omp.precond.end:
; DRCHECK-NEXT:    ret void
;
entry:
  %.omp.lb = alloca i64, align 8, addrspace(5)
  %.omp.ub = alloca i64, align 8, addrspace(5)
  %.omp.stride = alloca i64, align 8, addrspace(5)
  %.omp.is_last = alloca i32, align 4, addrspace(5)
  %sext.mask = and i64 %size, 4294967295
  %cmp.not = icmp eq i64 %sext.mask, 0
  br i1 %cmp.not, label %omp.precond.end, label %omp.precond.then

omp.precond.then:                                 ; preds = %entry
  %.omp.stride.ascast = addrspacecast ptr addrspace(5) %.omp.stride to ptr
  %.omp.is_last.ascast = addrspacecast ptr addrspace(5) %.omp.is_last to ptr
  %.omp.ub.ascast = addrspacecast ptr addrspace(5) %.omp.ub to ptr
  %.omp.lb.ascast = addrspacecast ptr addrspace(5) %.omp.lb to ptr
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %.omp.lb) #2
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %.omp.ub) #2
  store i64 %.previous.lb., ptr addrspace(5) %.omp.lb, align 8, !tbaa !13
  store i64 %.previous.ub., ptr addrspace(5) %.omp.ub, align 8, !tbaa !13
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %.omp.stride) #2
  store i64 1, ptr addrspace(5) %.omp.stride, align 8, !tbaa !13
  call void @llvm.lifetime.start.p5(i64 4, ptr addrspace(5) %.omp.is_last) #2
  store i32 0, ptr addrspace(5) %.omp.is_last, align 4, !tbaa !17
  %0 = load i32, ptr %.global_tid., align 4, !tbaa !17
  call void @__kmpc_for_static_init_8u(ptr addrspacecast (ptr addrspace(1) @anon.d45745454ee1a14b8e2bf5af923cbb9b.3 to ptr), i32 %0, i32 33, ptr nocapture nonnull %.omp.is_last.ascast, ptr nocapture nonnull %.omp.lb.ascast, ptr nocapture nonnull %.omp.ub.ascast, ptr nocapture nonnull %.omp.stride.ascast, i64 1, i64 1) #2
  %1 = load i64, ptr addrspace(5) %.omp.lb, align 8, !tbaa !13
  %add = add i64 %.previous.ub., 1
  %cmp425 = icmp ult i64 %1, %add
  br i1 %cmp425, label %omp.inner.for.body.lr.ph, label %omp.loop.exit

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %2 = load i64, ptr addrspace(5) %.omp.stride, align 8
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.inc, %omp.inner.for.body.lr.ph
  %.omp.iv.026 = phi i64 [ %1, %omp.inner.for.body.lr.ph ], [ %add15, %omp.inner.for.inc ]
  %conv6 = trunc i64 %.omp.iv.026 to i32
  %call = tail call noundef zeroext i1 @_Z5test1i(i32 noundef %conv6) #8
  br i1 %call, label %if.then, label %omp.inner.for.inc

if.then:                                          ; preds = %omp.inner.for.body
  tail call void @_Z4use1Pi(ptr noundef %a) #8
  %call8 = tail call noundef zeroext i1 @_Z5test2i(i32 noundef %conv6) #8
  br i1 %call8, label %if.then9, label %omp.inner.for.inc

if.then9:                                         ; preds = %if.then
  tail call void @_Z4use2Pi(ptr noundef %a) #8
  %call11 = tail call noundef zeroext i1 @_Z5test3i(i32 noundef %conv6) #8
  br i1 %call11, label %if.then12, label %omp.inner.for.inc

if.then12:                                        ; preds = %if.then9
  tail call void @_Z4use3Pi(ptr noundef %a) #8
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %if.then12, %if.then9, %if.then, %omp.inner.for.body
  %add15 = add i64 %2, %.omp.iv.026
  %cmp4 = icmp ult i64 %add15, %add
  br i1 %cmp4, label %omp.inner.for.body, label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.inc, %omp.precond.then
  tail call void @__kmpc_distribute_static_fini(ptr addrspacecast (ptr addrspace(1) @anon.d45745454ee1a14b8e2bf5af923cbb9b.2 to ptr), i32 %0) #2
  call void @llvm.lifetime.end.p5(i64 4, ptr addrspace(5) %.omp.is_last) #2
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %.omp.stride) #2
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %.omp.ub) #2
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %.omp.lb) #2
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  ret void
}

; Function Attrs: nounwind
declare void @__kmpc_for_static_init_8u(ptr, i32, i32, ptr nocapture nofree, ptr nocapture nofree, ptr nocapture nofree, ptr nocapture nofree, i64, i64) local_unnamed_addr #2

; Function Attrs: convergent
declare noundef zeroext i1 @_Z5test1i(i32 noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare void @_Z4use1Pi(ptr noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare noundef zeroext i1 @_Z5test2i(i32 noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare void @_Z4use2Pi(ptr noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare noundef zeroext i1 @_Z5test3i(i32 noundef) local_unnamed_addr #4

; Function Attrs: convergent
declare void @_Z4use3Pi(ptr noundef) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @__kmpc_distribute_static_fini(ptr, i32) local_unnamed_addr #2

; Function Attrs: alwaysinline
declare void @__kmpc_parallel_51(ptr, i32, i32, i32, i32, ptr, ptr, ptr, i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @__kmpc_global_thread_num(ptr) local_unnamed_addr #2

declare void @__kmpc_target_deinit() local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #6

attributes #0 = { alwaysinline norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "kernel" "no-trapping-math"="true" "omp_target_thread_limit"="256" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" "uniform-work-group-size"="true" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline convergent norecurse nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
attributes #4 = { convergent "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
attributes #5 = { alwaysinline }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #7 = { nounwind memory(readwrite) }
attributes #8 = { convergent nounwind }

!omp_offload.info = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8, !9}
!opencl.ocl.version = !{!10}
!llvm.ident = !{!11, !12}

!0 = !{i32 0, i32 78, i32 1555352471, !"_Z6vecaddPii", i32 17, i32 0, i32 0}
!2 = !{i32 1, !"amdgpu_code_object_version", i32 400}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 7, !"openmp", i32 51}
!5 = !{i32 7, !"openmp-device", i32 51}
!6 = !{i32 8, !"PIC Level", i32 2}
!7 = !{i32 4, !"amdgpu_hostcall", i32 1}
!8 = !{i32 1, !"ThinLTO", i32 0}
!9 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!10 = !{i32 2, i32 0}
!11 = !{!"clang version 18.0.0 (git@github.com:ivanradanov/llvm-project2.git 016a420fa542a2c55d0b3909be4b758864560e3e)"}
!12 = !{!"AMD clang version 17.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.7.0 23352 d1e13c532a947d0cbfc94759c00dcf152294aa13)"}
!13 = !{!14, !14, i64 0}
!14 = !{!"long", !15, i64 0}
!15 = !{!"omnipotent char", !16, i64 0}
!16 = !{!"Simple C++ TBAA"}
!17 = !{!18, !18, i64 0}
!18 = !{!"int", !15, i64 0}
!19 = !{!20, !20, i64 0}
!20 = !{!"any pointer", !15, i64 0}
